{
    "info": {
        "version": "v1.0.0", 
        "title": "Argo Events"
    }, 
    "paths": {}, 
    "swagger": "2.0", 
    "definitions": {
        "SQSEventSource": {
            "required": [
                "region", 
                "queue", 
                "waitTimeSeconds"
            ], 
            "type": "object", 
            "description": "SQSEventSource refers to event-source for AWS SQS related events", 
            "properties": {
                "secretKey": {
                    "description": "SecretKey refers K8 secret containing aws secret key", 
                    "$ref": "#/definitions/v1.SecretKeySelector"
                }, 
                "queueAccountId": {
                    "type": "string", 
                    "description": "QueueAccountID is the ID of the account that created the queue to monitor"
                }, 
                "region": {
                    "type": "string", 
                    "description": "Region is AWS region"
                }, 
                "roleARN": {
                    "type": "string", 
                    "description": "RoleARN is the Amazon Resource Name (ARN) of the role to assume."
                }, 
                "queue": {
                    "type": "string", 
                    "description": "Queue is AWS SQS queue to listen to for messages"
                }, 
                "waitTimeSeconds": {
                    "type": "integer", 
                    "description": "WaitTimeSeconds is The duration (in seconds) for which the call waits for a message to arrive in the queue before returning.", 
                    "format": "int64"
                }, 
                "jsonBody": {
                    "type": "boolean", 
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON"
                }, 
                "accessKey": {
                    "description": "AccessKey refers K8 secret containing aws access key", 
                    "$ref": "#/definitions/v1.SecretKeySelector"
                }, 
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata holds the user defined metadata which will passed along the event payload."
                }
            }
        }, 
        "PubSubEventSource": {
            "required": [
                "projectID", 
                "topicProjectID", 
                "credentialsFile"
            ], 
            "type": "object", 
            "description": "PubSubEventSource refers to event-source for GCP PubSub related events.", 
            "properties": {
                "topicProjectID": {
                    "type": "string", 
                    "description": "TopicProjectID identifies the project where the topic should exist or be created (assumed to be the same as ProjectID by default)"
                }, 
                "projectID": {
                    "type": "string", 
                    "description": "ProjectID is the unique identifier for your project on GCP"
                }, 
                "deleteSubscriptionOnFinish": {
                    "type": "boolean", 
                    "description": "DeleteSubscriptionOnFinish determines whether to delete the GCP PubSub subscription once the event source is stopped."
                }, 
                "topic": {
                    "type": "string", 
                    "description": "Topic on which a subscription will be created"
                }, 
                "credentialSecret": {
                    "description": "CredentialSecret references to the secret that contains JSON credentials to access GCP. If it is missing, it implicts to use Workload Identity to access. https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity", 
                    "$ref": "#/definitions/v1.SecretKeySelector"
                }, 
                "subscriptionID": {
                    "type": "string", 
                    "description": "SubscriptionID is given then use it instead of creating a new one"
                }, 
                "credentialsFile": {
                    "type": "string", 
                    "description": "CredentialsFile is the file that contains credentials to authenticate for GCP Deprecated, use CredentialSecret instead"
                }, 
                "jsonBody": {
                    "type": "boolean", 
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON"
                }, 
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata holds the user defined metadata which will passed along the event payload."
                }
            }
        }, 
        "GitlabEventSource": {
            "required": [
                "projectID", 
                "events", 
                "gitlabBaseURL"
            ], 
            "type": "object", 
            "description": "GitlabEventSource refers to event-source related to Gitlab events", 
            "properties": {
                "accessToken": {
                    "description": "AccessToken is reference to k8 secret which holds the gitlab api access information", 
                    "$ref": "#/definitions/v1.SecretKeySelector"
                }, 
                "enableSSLVerification": {
                    "type": "boolean", 
                    "description": "EnableSSLVerification to enable ssl verification"
                }, 
                "gitlabBaseURL": {
                    "type": "string", 
                    "description": "GitlabBaseURL is the base URL for API requests to a custom endpoint"
                }, 
                "webhook": {
                    "description": "Webhook holds configuration to run a http server", 
                    "$ref": "#/definitions/WebhookContext"
                }, 
                "projectID": {
                    "type": "string", 
                    "description": "ProjectID is the id of project for which integration needs to setup"
                }, 
                "deleteHookOnFinish": {
                    "type": "boolean", 
                    "description": "DeleteHookOnFinish determines whether to delete the GitLab hook for the project once the event source is stopped."
                }, 
                "events": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Events are gitlab event to listen to. Refer https://github.com/xanzy/go-gitlab/blob/bf34eca5d13a9f4c3f501d8a97b8ac226d55e4d9/projects.go#L794."
                }, 
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata holds the user defined metadata which will passed along the event payload."
                }
            }
        }, 
        "KafkaConsumerGroup": {
            "required": [
                "groupName"
            ], 
            "type": "object", 
            "properties": {
                "groupName": {
                    "type": "string", 
                    "description": "The name for the consumer group to use"
                }, 
                "oldest": {
                    "type": "boolean", 
                    "description": "When starting up a new group do we want to start from the oldest event (true) or the newest event (false), defaults to false"
                }, 
                "rebalanceStrategy": {
                    "type": "string", 
                    "description": "Rebalance strategy can be one of: sticky, roundrobin, range. Range is the default."
                }
            }
        }, 
        "KafkaEventSource": {
            "required": [
                "url", 
                "partition", 
                "topic"
            ], 
            "type": "object", 
            "description": "KafkaEventSource refers to event-source for Kafka related events", 
            "properties": {
                "tls": {
                    "description": "TLS configuration for the kafka client.", 
                    "$ref": "#/definitions/TLSConfig"
                }, 
                "connectionBackoff": {
                    "description": "Backoff holds parameters applied to connection.", 
                    "$ref": "#/definitions/Backoff"
                }, 
                "consumerGroup": {
                    "description": "Consumer group for kafka client", 
                    "$ref": "#/definitions/KafkaConsumerGroup"
                }, 
                "jsonBody": {
                    "type": "boolean", 
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON"
                }, 
                "partition": {
                    "type": "string", 
                    "description": "Partition name"
                }, 
                "topic": {
                    "type": "string", 
                    "description": "Topic name"
                }, 
                "url": {
                    "type": "string", 
                    "description": "URL to kafka cluster"
                }, 
                "version": {
                    "type": "string", 
                    "description": "Specify what kafka version is being connected to enables certain features in sarama, defaults to 1.0.0"
                }, 
                "limitEventsPerSecond": {
                    "type": "integer", 
                    "description": "Sets a limit on how many events get read from kafka per second.", 
                    "format": "int64"
                }, 
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata holds the user defined metadata which will passed along the event payload."
                }
            }
        }, 
        "AzureEventsHubEventSource": {
            "required": [
                "fqdn", 
                "hubName"
            ], 
            "type": "object", 
            "description": "AzureEventsHubEventSource describes the event source for azure events hub More info at https://docs.microsoft.com/en-us/azure/event-hubs/", 
            "properties": {
                "sharedAccessKeyName": {
                    "description": "SharedAccessKeyName is the name you chose for your application's SAS keys", 
                    "$ref": "#/definitions/v1.SecretKeySelector"
                }, 
                "sharedAccessKey": {
                    "description": "SharedAccessKey is the the generated value of the key", 
                    "$ref": "#/definitions/v1.SecretKeySelector"
                }, 
                "hubName": {
                    "type": "string", 
                    "description": "Event Hub path/name"
                }, 
                "fqdn": {
                    "type": "string", 
                    "description": "FQDN of the EventHubs namespace you created More info at https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string"
                }, 
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata holds the user defined metadata which will passed along the event payload."
                }
            }
        }, 
        "NATSEventsSource": {
            "required": [
                "url", 
                "subject"
            ], 
            "type": "object", 
            "description": "NATSEventsSource refers to event-source for NATS related events", 
            "properties": {
                "tls": {
                    "description": "TLS configuration for the nats client.", 
                    "$ref": "#/definitions/TLSConfig"
                }, 
                "connectionBackoff": {
                    "description": "ConnectionBackoff holds backoff applied to connection.", 
                    "$ref": "#/definitions/Backoff"
                }, 
                "url": {
                    "type": "string", 
                    "description": "URL to connect to NATS cluster"
                }, 
                "jsonBody": {
                    "type": "boolean", 
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON"
                }, 
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata holds the user defined metadata which will passed along the event payload."
                }, 
                "subject": {
                    "type": "string", 
                    "description": "Subject holds the name of the subject onto which messages are published"
                }
            }
        }, 
        "StripeEventSource": {
            "type": "object", 
            "description": "StripeEventSource describes the event source for stripe webhook notifications More info at https://stripe.com/docs/webhooks", 
            "properties": {
                "createWebhook": {
                    "type": "boolean", 
                    "description": "CreateWebhook if specified creates a new webhook programmatically."
                }, 
                "apiKey": {
                    "description": "APIKey refers to K8s secret that holds Stripe API key. Used only if CreateWebhook is enabled.", 
                    "$ref": "#/definitions/v1.SecretKeySelector"
                }, 
                "webhook": {
                    "description": "Webhook holds configuration for a REST endpoint", 
                    "$ref": "#/definitions/WebhookContext"
                }, 
                "eventFilter": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "EventFilter describes the type of events to listen to. If not specified, all types of events will be processed. More info at https://stripe.com/docs/api/events/list"
                }, 
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata holds the user defined metadata which will passed along the event payload."
                }
            }
        }, 
        "Metadata": {
            "type": "object", 
            "description": "Metadata holds the annotations and labels of an event source pod", 
            "properties": {
                "labels": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object"
                }, 
                "annotations": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object"
                }
            }
        }, 
        "RedisEventSource": {
            "required": [
                "hostAddress", 
                "channels"
            ], 
            "type": "object", 
            "description": "RedisEventSource describes an event source for the Redis PubSub. More info at https://godoc.org/github.com/go-redis/redis#example-PubSub", 
            "properties": {
                "tls": {
                    "description": "TLS configuration for the redis client.", 
                    "$ref": "#/definitions/TLSConfig"
                }, 
                "db": {
                    "type": "integer", 
                    "description": "DB to use. If not specified, default DB 0 will be used.", 
                    "format": "int32"
                }, 
                "namespace": {
                    "type": "string", 
                    "description": "Namespace to use to retrieve the password from. It should only be specified if password is declared"
                }, 
                "channels": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "hostAddress": {
                    "type": "string", 
                    "description": "HostAddress refers to the address of the Redis host/server"
                }, 
                "password": {
                    "description": "Password required for authentication if any.", 
                    "$ref": "#/definitions/v1.SecretKeySelector"
                }, 
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata holds the user defined metadata which will passed along the event payload."
                }
            }
        }, 
        "GithubEventSource": {
            "required": [
                "id", 
                "owner", 
                "repository", 
                "events"
            ], 
            "type": "object", 
            "description": "GithubEventSource refers to event-source for github related events", 
            "properties": {
                "insecure": {
                    "type": "boolean", 
                    "description": "Insecure tls verification"
                }, 
                "webhookSecret": {
                    "description": "WebhookSecret refers to K8s secret containing GitHub webhook secret https://developer.github.com/webhooks/securing/", 
                    "$ref": "#/definitions/v1.SecretKeySelector"
                }, 
                "contentType": {
                    "type": "string", 
                    "description": "ContentType of the event delivery"
                }, 
                "repository": {
                    "type": "string", 
                    "description": "Repository refers to GitHub repo name i.e. argo-events"
                }, 
                "githubUploadURL": {
                    "type": "string", 
                    "description": "GitHub upload URL (for GitHub Enterprise)"
                }, 
                "id": {
                    "type": "integer", 
                    "description": "Id is the webhook's id", 
                    "format": "int64"
                }, 
                "webhook": {
                    "description": "Webhook refers to the configuration required to run a http server", 
                    "$ref": "#/definitions/WebhookContext"
                }, 
                "apiToken": {
                    "description": "APIToken refers to a K8s secret containing github api token", 
                    "$ref": "#/definitions/v1.SecretKeySelector"
                }, 
                "owner": {
                    "type": "string", 
                    "description": "Owner refers to GitHub owner name i.e. argoproj"
                }, 
                "githubBaseURL": {
                    "type": "string", 
                    "description": "GitHub base URL (for GitHub Enterprise)"
                }, 
                "active": {
                    "type": "boolean", 
                    "description": "Active refers to status of the webhook for event deliveries. https://developer.github.com/webhooks/creating/#active"
                }, 
                "deleteHookOnFinish": {
                    "type": "boolean", 
                    "description": "DeleteHookOnFinish determines whether to delete the GitHub hook for the repository once the event source is stopped."
                }, 
                "events": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata holds the user defined metadata which will passed along the event payload."
                }
            }
        }, 
        "StorageGridFilter": {
            "required": [
                "prefix", 
                "suffix"
            ], 
            "type": "object", 
            "description": "StorageGridFilter represents filters to apply to bucket notifications for specifying constraints on objects", 
            "properties": {
                "prefix": {
                    "type": "string"
                }, 
                "suffix": {
                    "type": "string"
                }
            }
        }, 
        "Selector": {
            "required": [
                "key", 
                "value"
            ], 
            "type": "object", 
            "description": "Selector represents conditional operation to select K8s objects.", 
            "properties": {
                "operation": {
                    "type": "string", 
                    "description": "Supported operations like ==, !=, <=, >= etc. Defaults to ==. Refer https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors for more info."
                }, 
                "value": {
                    "type": "string", 
                    "description": "Value"
                }, 
                "key": {
                    "type": "string", 
                    "description": "Key name"
                }
            }
        }, 
        "SlackEventSource": {
            "type": "object", 
            "description": "SlackEventSource refers to event-source for Slack related events", 
            "properties": {
                "signingSecret": {
                    "description": "Slack App signing secret", 
                    "$ref": "#/definitions/v1.SecretKeySelector"
                }, 
                "token": {
                    "description": "Token for URL verification handshake", 
                    "$ref": "#/definitions/v1.SecretKeySelector"
                }, 
                "webhook": {
                    "description": "Webhook holds configuration for a REST endpoint", 
                    "$ref": "#/definitions/WebhookContext"
                }, 
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata holds the user defined metadata which will passed along the event payload."
                }
            }
        }, 
        "AMQPEventSource": {
            "required": [
                "url", 
                "exchangeName", 
                "exchangeType", 
                "routingKey"
            ], 
            "type": "object", 
            "description": "AMQPEventSource refers to an event-source for AMQP stream events", 
            "properties": {
                "tls": {
                    "description": "TLS configuration for the amqp client.", 
                    "$ref": "#/definitions/TLSConfig"
                }, 
                "connectionBackoff": {
                    "description": "Backoff holds parameters applied to connection.", 
                    "$ref": "#/definitions/Backoff"
                }, 
                "routingKey": {
                    "type": "string", 
                    "description": "Routing key for bindings"
                }, 
                "url": {
                    "type": "string", 
                    "description": "URL for rabbitmq service"
                }, 
                "jsonBody": {
                    "type": "boolean", 
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON"
                }, 
                "exchangeName": {
                    "type": "string", 
                    "description": "ExchangeName is the exchange name For more information, visit https://www.rabbitmq.com/tutorials/amqp-concepts.html"
                }, 
                "exchangeType": {
                    "type": "string", 
                    "description": "ExchangeType is rabbitmq exchange type"
                }, 
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata holds the user defined metadata which will passed along the event payload."
                }
            }
        }, 
        "EmitterEventSource": {
            "required": [
                "broker", 
                "channelKey", 
                "channelName"
            ], 
            "type": "object", 
            "description": "EmitterEventSource describes the event source for emitter More info at https://emitter.io/develop/getting-started/", 
            "properties": {
                "tls": {
                    "description": "TLS configuration for the emitter client.", 
                    "$ref": "#/definitions/TLSConfig"
                }, 
                "connectionBackoff": {
                    "description": "Backoff holds parameters applied to connection.", 
                    "$ref": "#/definitions/Backoff"
                }, 
                "password": {
                    "description": "Password to use to connect to broker", 
                    "$ref": "#/definitions/v1.SecretKeySelector"
                }, 
                "jsonBody": {
                    "type": "boolean", 
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON"
                }, 
                "broker": {
                    "type": "string", 
                    "description": "Broker URI to connect to."
                }, 
                "username": {
                    "description": "Username to use to connect to broker", 
                    "$ref": "#/definitions/v1.SecretKeySelector"
                }, 
                "channelName": {
                    "type": "string", 
                    "description": "ChannelName refers to the channel name"
                }, 
                "channelKey": {
                    "type": "string", 
                    "description": "ChannelKey refers to the channel key"
                }, 
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata holds the user defined metadata which will passed along the event payload."
                }
            }
        }, 
        "EventSourceSpec": {
            "type": "object", 
            "description": "EventSourceSpec refers to specification of event-source resource", 
            "properties": {
                "gitlab": {
                    "additionalProperties": {
                        "$ref": "#/definitions/GitlabEventSource"
                    }, 
                    "type": "object", 
                    "description": "Gitlab event sources"
                }, 
                "minio": {
                    "additionalProperties": {
                        "$ref": "#/definitions/S3Artifact"
                    }, 
                    "type": "object", 
                    "description": "Minio event sources"
                }, 
                "kafka": {
                    "additionalProperties": {
                        "$ref": "#/definitions/KafkaEventSource"
                    }, 
                    "type": "object", 
                    "description": "Kafka event sources"
                }, 
                "replica": {
                    "type": "integer", 
                    "description": "Replica is the gateway deployment replicas", 
                    "format": "int32"
                }, 
                "file": {
                    "additionalProperties": {
                        "$ref": "#/definitions/FileEventSource"
                    }, 
                    "type": "object", 
                    "description": "File event sources"
                }, 
                "nsq": {
                    "additionalProperties": {
                        "$ref": "#/definitions/NSQEventSource"
                    }, 
                    "type": "object", 
                    "description": "NSQ event source"
                }, 
                "pulsar": {
                    "additionalProperties": {
                        "$ref": "#/definitions/PulsarEventSource"
                    }, 
                    "type": "object", 
                    "description": "Pulsar event source"
                }, 
                "calendar": {
                    "additionalProperties": {
                        "$ref": "#/definitions/CalendarEventSource"
                    }, 
                    "type": "object", 
                    "description": "Calendar event sources"
                }, 
                "hdfs": {
                    "additionalProperties": {
                        "$ref": "#/definitions/HDFSEventSource"
                    }, 
                    "type": "object", 
                    "description": "HDFS event sources"
                }, 
                "amqp": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AMQPEventSource"
                    }, 
                    "type": "object", 
                    "description": "AMQP event sources"
                }, 
                "service": {
                    "description": "Service is the specifications of the service to expose the event source", 
                    "$ref": "#/definitions/Service"
                }, 
                "generic": {
                    "additionalProperties": {
                        "$ref": "#/definitions/GenericEventSource"
                    }, 
                    "type": "object", 
                    "description": "Generic event source"
                }, 
                "redis": {
                    "additionalProperties": {
                        "$ref": "#/definitions/RedisEventSource"
                    }, 
                    "type": "object", 
                    "description": "Redis event source"
                }, 
                "mqtt": {
                    "additionalProperties": {
                        "$ref": "#/definitions/MQTTEventSource"
                    }, 
                    "type": "object", 
                    "description": "MQTT event sources"
                }, 
                "template": {
                    "description": "Template is the pod specification for the event source", 
                    "$ref": "#/definitions/Template"
                }, 
                "sqs": {
                    "additionalProperties": {
                        "$ref": "#/definitions/SQSEventSource"
                    }, 
                    "type": "object", 
                    "description": "SQS event sources"
                }, 
                "webhook": {
                    "additionalProperties": {
                        "$ref": "#/definitions/WebhookContext"
                    }, 
                    "type": "object", 
                    "description": "Webhook event sources"
                }, 
                "azureEventsHub": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AzureEventsHubEventSource"
                    }, 
                    "type": "object", 
                    "description": "AzureEventsHub event sources"
                }, 
                "sns": {
                    "additionalProperties": {
                        "$ref": "#/definitions/SNSEventSource"
                    }, 
                    "type": "object", 
                    "description": "SNS event sources"
                }, 
                "emitter": {
                    "additionalProperties": {
                        "$ref": "#/definitions/EmitterEventSource"
                    }, 
                    "type": "object", 
                    "description": "Emitter event source"
                }, 
                "pubSub": {
                    "additionalProperties": {
                        "$ref": "#/definitions/PubSubEventSource"
                    }, 
                    "type": "object", 
                    "description": "PubSub eevnt sources"
                }, 
                "github": {
                    "additionalProperties": {
                        "$ref": "#/definitions/GithubEventSource"
                    }, 
                    "type": "object", 
                    "description": "Github event sources"
                }, 
                "resource": {
                    "additionalProperties": {
                        "$ref": "#/definitions/ResourceEventSource"
                    }, 
                    "type": "object", 
                    "description": "Resource event sources"
                }, 
                "slack": {
                    "additionalProperties": {
                        "$ref": "#/definitions/SlackEventSource"
                    }, 
                    "type": "object", 
                    "description": "Slack event sources"
                }, 
                "eventBusName": {
                    "type": "string", 
                    "description": "EventBusName references to a EventBus name. By default the value is \"default\""
                }, 
                "nats": {
                    "additionalProperties": {
                        "$ref": "#/definitions/NATSEventsSource"
                    }, 
                    "type": "object", 
                    "description": "NATS event sources"
                }, 
                "storageGrid": {
                    "additionalProperties": {
                        "$ref": "#/definitions/StorageGridEventSource"
                    }, 
                    "type": "object", 
                    "description": "StorageGrid event sources"
                }, 
                "stripe": {
                    "additionalProperties": {
                        "$ref": "#/definitions/StripeEventSource"
                    }, 
                    "type": "object", 
                    "description": "Stripe event sources"
                }
            }
        }, 
        "FileEventSource": {
            "required": [
                "eventType", 
                "watchPathConfig"
            ], 
            "type": "object", 
            "description": "FileEventSource describes an event-source for file related events.", 
            "properties": {
                "eventType": {
                    "type": "string", 
                    "description": "Type of file operations to watch Refer https://github.com/fsnotify/fsnotify/blob/master/fsnotify.go for more information"
                }, 
                "watchPathConfig": {
                    "description": "WatchPathConfig contains configuration about the file path to watch", 
                    "$ref": "#/definitions/WatchPathConfig"
                }, 
                "polling": {
                    "type": "boolean", 
                    "description": "Use polling instead of inotify"
                }, 
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata holds the user defined metadata which will passed along the event payload."
                }
            }
        }, 
        "ResourceFilter": {
            "type": "object", 
            "description": "ResourceFilter contains K8 ObjectMeta information to further filter resource event objects", 
            "properties": {
                "fields": {
                    "items": {
                        "$ref": "#/definitions/Selector"
                    }, 
                    "type": "array", 
                    "description": "Fields provide listing options to K8s API to watch resource/s. Refer https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/ for more info."
                }, 
                "prefix": {
                    "type": "string", 
                    "description": "Prefix filter is applied on the resource name."
                }, 
                "labels": {
                    "items": {
                        "$ref": "#/definitions/Selector"
                    }, 
                    "type": "array", 
                    "description": "Labels provide listing options to K8s API to watch resource/s. Refer https://kubernetes.io/docs/concepts/overview/working-with-objects/label-selectors/ for more info."
                }, 
                "afterStart": {
                    "type": "boolean", 
                    "description": "If the resource is created after the start time then the event is treated as valid."
                }, 
                "createdBy": {
                    "description": "If resource is created before the specified time then the event is treated as valid.", 
                    "$ref": "#/definitions/v1.Time"
                }
            }
        }, 
        "EventSourceStatus": {
            "type": "object", 
            "description": "EventSourceStatus holds the status of the event-source resource", 
            "properties": {
                "conditions": {
                    "items": {
                        "$ref": "#/definitions/Condition"
                    }, 
                    "type": "array", 
                    "description": "Conditions are the latest available observations of a resource's current state.", 
                    "x-kubernetes-patch-strategy": "merge", 
                    "x-kubernetes-patch-merge-key": "type"
                }
            }
        }, 
        "WatchPathConfig": {
            "required": [
                "directory"
            ], 
            "type": "object", 
            "properties": {
                "directory": {
                    "type": "string", 
                    "description": "Directory to watch for events"
                }, 
                "path": {
                    "type": "string", 
                    "description": "Path is relative path of object to watch with respect to the directory"
                }, 
                "pathRegexp": {
                    "type": "string", 
                    "description": "PathRegexp is regexp of relative path of object to watch with respect to the directory"
                }
            }
        }, 
        "CalendarEventSource": {
            "required": [
                "schedule", 
                "interval"
            ], 
            "type": "object", 
            "description": "CalendarEventSource describes a time based dependency. One of the fields (schedule, interval, or recurrence) must be passed. Schedule takes precedence over interval; interval takes precedence over recurrence", 
            "properties": {
                "schedule": {
                    "type": "string", 
                    "description": "Schedule is a cron-like expression. For reference, see: https://en.wikipedia.org/wiki/Cron"
                }, 
                "interval": {
                    "type": "string", 
                    "description": "Interval is a string that describes an interval duration, e.g. 1s, 30m, 2h..."
                }, 
                "timezone": {
                    "type": "string", 
                    "description": "Timezone in which to run the schedule"
                }, 
                "userPayload": {
                    "type": "string", 
                    "description": "UserPayload will be sent to sensor as extra data once the event is triggered Deprecated. Please use Metadata instead.", 
                    "format": "byte"
                }, 
                "exclusionDates": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata holds the user defined metadata which will passed along the event payload."
                }
            }
        }, 
        "Template": {
            "type": "object", 
            "description": "Template holds the information of an EventSource deployment template", 
            "properties": {
                "container": {
                    "description": "Container is the main container image to run in the event source pod", 
                    "$ref": "#/definitions/v1.Container"
                }, 
                "serviceAccountName": {
                    "type": "string", 
                    "description": "ServiceAccountName is the name of the ServiceAccount to use to run event source pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"
                }, 
                "nodeSelector": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/"
                }, 
                "affinity": {
                    "description": "If specified, the pod's scheduling constraints", 
                    "$ref": "#/definitions/v1.Affinity"
                }, 
                "volumes": {
                    "items": {
                        "$ref": "#/definitions/v1.Volume"
                    }, 
                    "type": "array", 
                    "description": "Volumes is a list of volumes that can be mounted by containers in a workflow.", 
                    "x-kubernetes-patch-strategy": "merge", 
                    "x-kubernetes-patch-merge-key": "name"
                }, 
                "tolerations": {
                    "items": {
                        "$ref": "#/definitions/v1.Toleration"
                    }, 
                    "type": "array", 
                    "description": "If specified, the pod's tolerations."
                }, 
                "securityContext": {
                    "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.", 
                    "$ref": "#/definitions/v1.PodSecurityContext"
                }, 
                "metadata": {
                    "description": "Metdata sets the pods's metadata, i.e. annotations and labels", 
                    "$ref": "#/definitions/Metadata"
                }
            }
        }, 
        "MQTTEventSource": {
            "required": [
                "url", 
                "topic", 
                "clientId"
            ], 
            "type": "object", 
            "description": "MQTTEventSource refers to event-source for MQTT related events", 
            "properties": {
                "tls": {
                    "description": "TLS configuration for the mqtt client.", 
                    "$ref": "#/definitions/TLSConfig"
                }, 
                "connectionBackoff": {
                    "description": "ConnectionBackoff holds backoff applied to connection.", 
                    "$ref": "#/definitions/Backoff"
                }, 
                "url": {
                    "type": "string", 
                    "description": "URL to connect to broker"
                }, 
                "jsonBody": {
                    "type": "boolean", 
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON"
                }, 
                "clientId": {
                    "type": "string", 
                    "description": "ClientID is the id of the client"
                }, 
                "topic": {
                    "type": "string", 
                    "description": "Topic name"
                }, 
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata holds the user defined metadata which will passed along the event payload."
                }
            }
        }, 
        "GenericEventSource": {
            "required": [
                "value"
            ], 
            "type": "object", 
            "description": "GenericEventSource refers to a generic event source. It can be used to implement a custom event source.", 
            "properties": {
                "value": {
                    "type": "string", 
                    "description": "Value of the event source"
                }
            }
        }, 
        "SNSEventSource": {
            "required": [
                "topicArn", 
                "region"
            ], 
            "type": "object", 
            "description": "SNSEventSource refers to event-source for AWS SNS related events", 
            "properties": {
                "accessKey": {
                    "description": "AccessKey refers K8 secret containing aws access key", 
                    "$ref": "#/definitions/v1.SecretKeySelector"
                }, 
                "webhook": {
                    "description": "Webhook configuration for http server", 
                    "$ref": "#/definitions/WebhookContext"
                }, 
                "secretKey": {
                    "description": "SecretKey refers K8 secret containing aws secret key", 
                    "$ref": "#/definitions/v1.SecretKeySelector"
                }, 
                "region": {
                    "type": "string", 
                    "description": "Region is AWS region"
                }, 
                "roleARN": {
                    "type": "string", 
                    "description": "RoleARN is the Amazon Resource Name (ARN) of the role to assume."
                }, 
                "topicArn": {
                    "type": "string", 
                    "description": "TopicArn"
                }, 
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata holds the user defined metadata which will passed along the event payload."
                }
            }
        }, 
        "WebhookContext": {
            "required": [
                "endpoint", 
                "method", 
                "port", 
                "url"
            ], 
            "type": "object", 
            "description": "WebhookContext holds a general purpose REST API context", 
            "properties": {
                "serverCertPath": {
                    "type": "string", 
                    "description": "DeprecatedServerCertPath refers the file that contains the cert."
                }, 
                "endpoint": {
                    "type": "string", 
                    "description": "REST API endpoint"
                }, 
                "serverKeyPath": {
                    "type": "string", 
                    "description": "DeprecatedServerKeyPath refers the file that contains private key"
                }, 
                "authSecret": {
                    "description": "AuthSecret holds a secret selector that contains a bearer token for authentication", 
                    "$ref": "#/definitions/v1.SecretKeySelector"
                }, 
                "serverKeySecret": {
                    "description": "ServerKeyPath refers the file that contains private key", 
                    "$ref": "#/definitions/v1.SecretKeySelector"
                }, 
                "method": {
                    "type": "string", 
                    "description": "Method is HTTP request method that indicates the desired action to be performed for a given resource. See RFC7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content"
                }, 
                "url": {
                    "type": "string", 
                    "description": "URL is the url of the server."
                }, 
                "serverCertSecret": {
                    "description": "ServerCertPath refers the file that contains the cert.", 
                    "$ref": "#/definitions/v1.SecretKeySelector"
                }, 
                "port": {
                    "type": "string", 
                    "description": "Port on which HTTP server is listening for incoming events."
                }, 
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata holds the user defined metadata which will passed along the event payload."
                }
            }
        }, 
        "PulsarEventSource": {
            "required": [
                "topics", 
                "url"
            ], 
            "type": "object", 
            "description": "PulsarEventSource describes the event source for Apache Pulsar", 
            "properties": {
                "tls": {
                    "description": "TLS configuration for the pulsar client.", 
                    "$ref": "#/definitions/TLSConfig"
                }, 
                "connectionBackoff": {
                    "description": "Backoff holds parameters applied to connection.", 
                    "$ref": "#/definitions/Backoff"
                }, 
                "url": {
                    "type": "string", 
                    "description": "Configure the service URL for the Pulsar service."
                }, 
                "jsonBody": {
                    "type": "boolean", 
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON"
                }, 
                "topics": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Name of the topics to subscribe to."
                }, 
                "tlsTrustCertsSecret": {
                    "description": "Trusted TLS certificate secret.", 
                    "$ref": "#/definitions/v1.SecretKeySelector"
                }, 
                "tlsAllowInsecureConnection": {
                    "type": "boolean", 
                    "description": "Whether the Pulsar client accept untrusted TLS certificate from broker."
                }, 
                "type": {
                    "type": "string", 
                    "description": "Type of the subscription. Only \"exclusive\" and \"shared\" is supported. Defaults to exclusive."
                }, 
                "tlsValidateHostname": {
                    "type": "boolean", 
                    "description": "Whether the Pulsar client verify the validity of the host name from broker."
                }, 
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata holds the user defined metadata which will passed along the event payload."
                }
            }
        }, 
        "StorageGridEventSource": {
            "required": [
                "topicArn", 
                "bucket", 
                "authToken", 
                "apiURL"
            ], 
            "type": "object", 
            "description": "StorageGridEventSource refers to event-source for StorageGrid related events", 
            "properties": {
                "authToken": {
                    "description": "Auth token for storagegrid api", 
                    "$ref": "#/definitions/v1.SecretKeySelector"
                }, 
                "webhook": {
                    "description": "Webhook holds configuration for a REST endpoint", 
                    "$ref": "#/definitions/WebhookContext"
                }, 
                "region": {
                    "type": "string", 
                    "description": "S3 region. Defaults to us-east-1"
                }, 
                "bucket": {
                    "type": "string", 
                    "description": "Name of the bucket to register notifications for."
                }, 
                "events": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "filter": {
                    "description": "Filter on object key which caused the notification.", 
                    "$ref": "#/definitions/StorageGridFilter"
                }, 
                "apiURL": {
                    "type": "string", 
                    "description": "APIURL is the url of the storagegrid api."
                }, 
                "topicArn": {
                    "type": "string", 
                    "description": "TopicArn"
                }, 
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata holds the user defined metadata which will passed along the event payload."
                }
            }
        }, 
        "Service": {
            "type": "object", 
            "description": "Service holds the service information eventsource exposes", 
            "properties": {
                "clusterIP": {
                    "type": "string", 
                    "description": "clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
                }, 
                "ports": {
                    "description": "The list of ports that are exposed by this ClusterIP service.", 
                    "items": {
                        "$ref": "#/definitions/v1.ServicePort"
                    }, 
                    "x-kubernetes-patch-strategy": "merge", 
                    "x-kubernetes-list-map-keys": [
                        "port", 
                        "protocol"
                    ], 
                    "x-kubernetes-patch-merge-key": "port", 
                    "type": "array", 
                    "x-kubernetes-list-type": "map"
                }
            }
        }, 
        "HDFSEventSource": {
            "required": [
                "directory", 
                "type", 
                "addresses"
            ], 
            "type": "object", 
            "description": "HDFSEventSource refers to event-source for HDFS related events", 
            "properties": {
                "krbUsername": {
                    "type": "string", 
                    "description": "KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used."
                }, 
                "addresses": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "checkInterval": {
                    "type": "string", 
                    "description": "CheckInterval is a string that describes an interval duration to check the directory state, e.g. 1s, 30m, 2h... (defaults to 1m)"
                }, 
                "krbCCacheSecret": {
                    "description": "KrbCCacheSecret is the secret selector for Kerberos ccache Either ccache or keytab can be set to use Kerberos.", 
                    "$ref": "#/definitions/v1.SecretKeySelector"
                }, 
                "krbRealm": {
                    "type": "string", 
                    "description": "KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used."
                }, 
                "hdfsUser": {
                    "type": "string", 
                    "description": "HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used."
                }, 
                "pathRegexp": {
                    "type": "string", 
                    "description": "PathRegexp is regexp of relative path of object to watch with respect to the directory"
                }, 
                "krbServicePrincipalName": {
                    "type": "string", 
                    "description": "KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used."
                }, 
                "directory": {
                    "type": "string", 
                    "description": "Directory to watch for events"
                }, 
                "path": {
                    "type": "string", 
                    "description": "Path is relative path of object to watch with respect to the directory"
                }, 
                "krbKeytabSecret": {
                    "description": "KrbKeytabSecret is the secret selector for Kerberos keytab Either ccache or keytab can be set to use Kerberos.", 
                    "$ref": "#/definitions/v1.SecretKeySelector"
                }, 
                "type": {
                    "type": "string", 
                    "description": "Type of file operations to watch"
                }, 
                "krbConfigConfigMap": {
                    "description": "KrbConfig is the configmap selector for Kerberos config as string It must be set if either ccache or keytab is used.", 
                    "$ref": "#/definitions/v1.ConfigMapKeySelector"
                }, 
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata holds the user defined metadata which will passed along the event payload."
                }
            }
        }, 
        "EventSource": {
            "required": [
                "metadata", 
                "spec", 
                "status"
            ], 
            "type": "object", 
            "description": "EventSource is the definition of a eventsource resource", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/EventSourceStatus"
                }, 
                "kind": {
                    "type": "string", 
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
                }, 
                "spec": {
                    "$ref": "#/definitions/EventSourceSpec"
                }, 
                "apiVersion": {
                    "type": "string", 
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
                }, 
                "metadata": {
                    "$ref": "#/definitions/v1.ObjectMeta"
                }
            }
        }, 
        "ResourceEventSource": {
            "required": [
                "namespace", 
                "group", 
                "version", 
                "resource", 
                "eventTypes"
            ], 
            "type": "object", 
            "description": "ResourceEventSource refers to a event-source for K8s resource related events.", 
            "properties": {
                "resource": {
                    "type": "string"
                }, 
                "namespace": {
                    "type": "string", 
                    "description": "Namespace where resource is deployed"
                }, 
                "group": {
                    "type": "string"
                }, 
                "filter": {
                    "description": "Filter is applied on the metadata of the resource If you apply filter, then the internal event informer will only monitor objects that pass the filter.", 
                    "$ref": "#/definitions/ResourceFilter"
                }, 
                "version": {
                    "type": "string"
                }, 
                "eventTypes": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "EventTypes is the list of event type to watch. Possible values are - ADD, UPDATE and DELETE."
                }, 
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata holds the user defined metadata which will passed along the event payload."
                }
            }
        }, 
        "NSQEventSource": {
            "required": [
                "hostAddress", 
                "topic", 
                "channel"
            ], 
            "type": "object", 
            "description": "NSQEventSource describes the event source for NSQ PubSub More info at https://godoc.org/github.com/nsqio/go-nsq", 
            "properties": {
                "tls": {
                    "description": "TLS configuration for the nsq client.", 
                    "$ref": "#/definitions/TLSConfig"
                }, 
                "connectionBackoff": {
                    "description": "Backoff holds parameters applied to connection.", 
                    "$ref": "#/definitions/Backoff"
                }, 
                "jsonBody": {
                    "type": "boolean", 
                    "description": "JSONBody specifies that all event body payload coming from this source will be JSON"
                }, 
                "topic": {
                    "type": "string", 
                    "description": "Topic to subscribe to."
                }, 
                "hostAddress": {
                    "type": "string", 
                    "description": "HostAddress is the address of the host for NSQ lookup"
                }, 
                "channel": {
                    "type": "string", 
                    "description": "Channel used for subscription"
                }, 
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Metadata holds the user defined metadata which will passed along the event payload."
                }
            }
        }
    }
}
