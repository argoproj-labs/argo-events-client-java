/*
 * Argo Events
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.argoproj.events.models.eventsource;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.argoproj.events.models.eventsource.WebhookContext;
import io.kubernetes.client.openapi.models.V1SecretKeySelector;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * BitbucketServerEventSource refers to event-source related to Bitbucket Server events
 */
@ApiModel(description = "BitbucketServerEventSource refers to event-source related to Bitbucket Server events")

public class BitbucketServerEventSource {
  public static final String SERIALIZED_NAME_REPOSITORY_SLUG = "repositorySlug";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_SLUG)
  private String repositorySlug;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN = "accessToken";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN)
  private V1SecretKeySelector accessToken = null;

  public static final String SERIALIZED_NAME_WEBHOOK_SECRET = "webhookSecret";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_SECRET)
  private V1SecretKeySelector webhookSecret = null;

  public static final String SERIALIZED_NAME_WEBHOOK = "webhook";
  @SerializedName(SERIALIZED_NAME_WEBHOOK)
  private WebhookContext webhook;

  public static final String SERIALIZED_NAME_BITBUCKETSERVER_BASE_U_R_L = "bitbucketserverBaseURL";
  @SerializedName(SERIALIZED_NAME_BITBUCKETSERVER_BASE_U_R_L)
  private String bitbucketserverBaseURL;

  public static final String SERIALIZED_NAME_DELETE_HOOK_ON_FINISH = "deleteHookOnFinish";
  @SerializedName(SERIALIZED_NAME_DELETE_HOOK_ON_FINISH)
  private Boolean deleteHookOnFinish;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<String> events = new ArrayList<String>();

  public static final String SERIALIZED_NAME_PROJECT_KEY = "projectKey";
  @SerializedName(SERIALIZED_NAME_PROJECT_KEY)
  private String projectKey;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = null;


  public BitbucketServerEventSource repositorySlug(String repositorySlug) {
    
    this.repositorySlug = repositorySlug;
    return this;
  }

   /**
   * RepositorySlug is the slug of the repository for which integration needs to setup
   * @return repositorySlug
  **/
  @ApiModelProperty(required = true, value = "RepositorySlug is the slug of the repository for which integration needs to setup")

  public String getRepositorySlug() {
    return repositorySlug;
  }


  public void setRepositorySlug(String repositorySlug) {
    this.repositorySlug = repositorySlug;
  }


  public BitbucketServerEventSource accessToken(V1SecretKeySelector accessToken) {
    
    this.accessToken = accessToken;
    return this;
  }

   /**
   * Get accessToken
   * @return accessToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1SecretKeySelector getAccessToken() {
    return accessToken;
  }


  public void setAccessToken(V1SecretKeySelector accessToken) {
    this.accessToken = accessToken;
  }


  public BitbucketServerEventSource webhookSecret(V1SecretKeySelector webhookSecret) {
    
    this.webhookSecret = webhookSecret;
    return this;
  }

   /**
   * Get webhookSecret
   * @return webhookSecret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1SecretKeySelector getWebhookSecret() {
    return webhookSecret;
  }


  public void setWebhookSecret(V1SecretKeySelector webhookSecret) {
    this.webhookSecret = webhookSecret;
  }


  public BitbucketServerEventSource webhook(WebhookContext webhook) {
    
    this.webhook = webhook;
    return this;
  }

   /**
   * Get webhook
   * @return webhook
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public WebhookContext getWebhook() {
    return webhook;
  }


  public void setWebhook(WebhookContext webhook) {
    this.webhook = webhook;
  }


  public BitbucketServerEventSource bitbucketserverBaseURL(String bitbucketserverBaseURL) {
    
    this.bitbucketserverBaseURL = bitbucketserverBaseURL;
    return this;
  }

   /**
   * BitbucketServerBaseURL is the base URL for API requests to a custom endpoint
   * @return bitbucketserverBaseURL
  **/
  @ApiModelProperty(required = true, value = "BitbucketServerBaseURL is the base URL for API requests to a custom endpoint")

  public String getBitbucketserverBaseURL() {
    return bitbucketserverBaseURL;
  }


  public void setBitbucketserverBaseURL(String bitbucketserverBaseURL) {
    this.bitbucketserverBaseURL = bitbucketserverBaseURL;
  }


  public BitbucketServerEventSource deleteHookOnFinish(Boolean deleteHookOnFinish) {
    
    this.deleteHookOnFinish = deleteHookOnFinish;
    return this;
  }

   /**
   * DeleteHookOnFinish determines whether to delete the Bitbucket Server hook for the project once the event source is stopped.
   * @return deleteHookOnFinish
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "DeleteHookOnFinish determines whether to delete the Bitbucket Server hook for the project once the event source is stopped.")

  public Boolean getDeleteHookOnFinish() {
    return deleteHookOnFinish;
  }


  public void setDeleteHookOnFinish(Boolean deleteHookOnFinish) {
    this.deleteHookOnFinish = deleteHookOnFinish;
  }


  public BitbucketServerEventSource events(List<String> events) {
    
    this.events = events;
    return this;
  }

  public BitbucketServerEventSource addEventsItem(String eventsItem) {
    this.events.add(eventsItem);
    return this;
  }

   /**
   * Events are bitbucket event to listen to. Refer https://confluence.atlassian.com/bitbucketserver/event-payload-938025882.html
   * @return events
  **/
  @ApiModelProperty(required = true, value = "Events are bitbucket event to listen to. Refer https://confluence.atlassian.com/bitbucketserver/event-payload-938025882.html")

  public List<String> getEvents() {
    return events;
  }


  public void setEvents(List<String> events) {
    this.events = events;
  }


  public BitbucketServerEventSource projectKey(String projectKey) {
    
    this.projectKey = projectKey;
    return this;
  }

   /**
   * ProjectKey is the key of project for which integration needs to setup
   * @return projectKey
  **/
  @ApiModelProperty(required = true, value = "ProjectKey is the key of project for which integration needs to setup")

  public String getProjectKey() {
    return projectKey;
  }


  public void setProjectKey(String projectKey) {
    this.projectKey = projectKey;
  }


  public BitbucketServerEventSource metadata(Map<String, String> metadata) {
    
    this.metadata = metadata;
    return this;
  }

  public BitbucketServerEventSource putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<String, String>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * Metadata holds the user defined metadata which will passed along the event payload.
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Metadata holds the user defined metadata which will passed along the event payload.")

  public Map<String, String> getMetadata() {
    return metadata;
  }


  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BitbucketServerEventSource bitbucketServerEventSource = (BitbucketServerEventSource) o;
    return Objects.equals(this.repositorySlug, bitbucketServerEventSource.repositorySlug) &&
        Objects.equals(this.accessToken, bitbucketServerEventSource.accessToken) &&
        Objects.equals(this.webhookSecret, bitbucketServerEventSource.webhookSecret) &&
        Objects.equals(this.webhook, bitbucketServerEventSource.webhook) &&
        Objects.equals(this.bitbucketserverBaseURL, bitbucketServerEventSource.bitbucketserverBaseURL) &&
        Objects.equals(this.deleteHookOnFinish, bitbucketServerEventSource.deleteHookOnFinish) &&
        Objects.equals(this.events, bitbucketServerEventSource.events) &&
        Objects.equals(this.projectKey, bitbucketServerEventSource.projectKey) &&
        Objects.equals(this.metadata, bitbucketServerEventSource.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(repositorySlug, accessToken, webhookSecret, webhook, bitbucketserverBaseURL, deleteHookOnFinish, events, projectKey, metadata);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BitbucketServerEventSource {\n");
    sb.append("    repositorySlug: ").append(toIndentedString(repositorySlug)).append("\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    webhookSecret: ").append(toIndentedString(webhookSecret)).append("\n");
    sb.append("    webhook: ").append(toIndentedString(webhook)).append("\n");
    sb.append("    bitbucketserverBaseURL: ").append(toIndentedString(bitbucketserverBaseURL)).append("\n");
    sb.append("    deleteHookOnFinish: ").append(toIndentedString(deleteHookOnFinish)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    projectKey: ").append(toIndentedString(projectKey)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

