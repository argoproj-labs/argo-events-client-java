/*
 * Argo Events
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.argoproj.events.models.sensor;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.argoproj.events.models.sensor.GitCreds;
import io.argoproj.events.models.sensor.GitRemoteConfig;
import io.kubernetes.client.openapi.models.V1SecretKeySelector;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * GitArtifact contains information about an artifact stored in git
 */
@ApiModel(description = "GitArtifact contains information about an artifact stored in git")

public class GitArtifact {
  public static final String SERIALIZED_NAME_REMOTE = "remote";
  @SerializedName(SERIALIZED_NAME_REMOTE)
  private GitRemoteConfig remote;

  public static final String SERIALIZED_NAME_FILE_PATH = "filePath";
  @SerializedName(SERIALIZED_NAME_FILE_PATH)
  private String filePath;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_SSH_KEY_SECRET = "sshKeySecret";
  @SerializedName(SERIALIZED_NAME_SSH_KEY_SECRET)
  private V1SecretKeySelector sshKeySecret = null;

  public static final String SERIALIZED_NAME_CLONE_DIRECTORY = "cloneDirectory";
  @SerializedName(SERIALIZED_NAME_CLONE_DIRECTORY)
  private String cloneDirectory;

  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private String branch;

  public static final String SERIALIZED_NAME_REF = "ref";
  @SerializedName(SERIALIZED_NAME_REF)
  private String ref;

  public static final String SERIALIZED_NAME_CREDS = "creds";
  @SerializedName(SERIALIZED_NAME_CREDS)
  private GitCreds creds;


  public GitArtifact remote(GitRemoteConfig remote) {
    
    this.remote = remote;
    return this;
  }

   /**
   * Get remote
   * @return remote
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GitRemoteConfig getRemote() {
    return remote;
  }


  public void setRemote(GitRemoteConfig remote) {
    this.remote = remote;
  }


  public GitArtifact filePath(String filePath) {
    
    this.filePath = filePath;
    return this;
  }

   /**
   * Path to file that contains trigger resource definition
   * @return filePath
  **/
  @ApiModelProperty(required = true, value = "Path to file that contains trigger resource definition")

  public String getFilePath() {
    return filePath;
  }


  public void setFilePath(String filePath) {
    this.filePath = filePath;
  }


  public GitArtifact url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Git URL
   * @return url
  **/
  @ApiModelProperty(required = true, value = "Git URL")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public GitArtifact tag(String tag) {
    
    this.tag = tag;
    return this;
  }

   /**
   * Tag to use to pull trigger resource
   * @return tag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tag to use to pull trigger resource")

  public String getTag() {
    return tag;
  }


  public void setTag(String tag) {
    this.tag = tag;
  }


  public GitArtifact sshKeySecret(V1SecretKeySelector sshKeySecret) {
    
    this.sshKeySecret = sshKeySecret;
    return this;
  }

   /**
   * Get sshKeySecret
   * @return sshKeySecret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1SecretKeySelector getSshKeySecret() {
    return sshKeySecret;
  }


  public void setSshKeySecret(V1SecretKeySelector sshKeySecret) {
    this.sshKeySecret = sshKeySecret;
  }


  public GitArtifact cloneDirectory(String cloneDirectory) {
    
    this.cloneDirectory = cloneDirectory;
    return this;
  }

   /**
   * Directory to clone the repository. We clone complete directory because GitArtifact is not limited to any specific Git service providers. Hence we don&#39;t use any specific git provider client.
   * @return cloneDirectory
  **/
  @ApiModelProperty(required = true, value = "Directory to clone the repository. We clone complete directory because GitArtifact is not limited to any specific Git service providers. Hence we don't use any specific git provider client.")

  public String getCloneDirectory() {
    return cloneDirectory;
  }


  public void setCloneDirectory(String cloneDirectory) {
    this.cloneDirectory = cloneDirectory;
  }


  public GitArtifact branch(String branch) {
    
    this.branch = branch;
    return this;
  }

   /**
   * Branch to use to pull trigger resource
   * @return branch
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Branch to use to pull trigger resource")

  public String getBranch() {
    return branch;
  }


  public void setBranch(String branch) {
    this.branch = branch;
  }


  public GitArtifact ref(String ref) {
    
    this.ref = ref;
    return this;
  }

   /**
   * Ref to use to pull trigger resource. Will result in a shallow clone and fetch.
   * @return ref
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Ref to use to pull trigger resource. Will result in a shallow clone and fetch.")

  public String getRef() {
    return ref;
  }


  public void setRef(String ref) {
    this.ref = ref;
  }


  public GitArtifact creds(GitCreds creds) {
    
    this.creds = creds;
    return this;
  }

   /**
   * Get creds
   * @return creds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GitCreds getCreds() {
    return creds;
  }


  public void setCreds(GitCreds creds) {
    this.creds = creds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitArtifact gitArtifact = (GitArtifact) o;
    return Objects.equals(this.remote, gitArtifact.remote) &&
        Objects.equals(this.filePath, gitArtifact.filePath) &&
        Objects.equals(this.url, gitArtifact.url) &&
        Objects.equals(this.tag, gitArtifact.tag) &&
        Objects.equals(this.sshKeySecret, gitArtifact.sshKeySecret) &&
        Objects.equals(this.cloneDirectory, gitArtifact.cloneDirectory) &&
        Objects.equals(this.branch, gitArtifact.branch) &&
        Objects.equals(this.ref, gitArtifact.ref) &&
        Objects.equals(this.creds, gitArtifact.creds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(remote, filePath, url, tag, sshKeySecret, cloneDirectory, branch, ref, creds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitArtifact {\n");
    sb.append("    remote: ").append(toIndentedString(remote)).append("\n");
    sb.append("    filePath: ").append(toIndentedString(filePath)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    sshKeySecret: ").append(toIndentedString(sshKeySecret)).append("\n");
    sb.append("    cloneDirectory: ").append(toIndentedString(cloneDirectory)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    creds: ").append(toIndentedString(creds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

