/*
 * Argo Events
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.6.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.argoproj.events.models.sensor;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.argoproj.events.models.sensor.DataFilter;
import io.argoproj.events.models.sensor.EventContext;
import io.argoproj.events.models.sensor.ExprFilter;
import io.argoproj.events.models.sensor.TimeFilter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * EventDependencyFilter defines filters and constraints for a event.
 */
@ApiModel(description = "EventDependencyFilter defines filters and constraints for a event.")

public class EventDependencyFilter {
  public static final String SERIALIZED_NAME_EXPR_LOGICAL_OPERATOR = "exprLogicalOperator";
  @SerializedName(SERIALIZED_NAME_EXPR_LOGICAL_OPERATOR)
  private String exprLogicalOperator;

  public static final String SERIALIZED_NAME_DATA_LOGICAL_OPERATOR = "dataLogicalOperator";
  @SerializedName(SERIALIZED_NAME_DATA_LOGICAL_OPERATOR)
  private String dataLogicalOperator;

  public static final String SERIALIZED_NAME_EXPRS = "exprs";
  @SerializedName(SERIALIZED_NAME_EXPRS)
  private List<ExprFilter> exprs = null;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private EventContext context;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private TimeFilter time;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private List<DataFilter> data = null;


  public EventDependencyFilter exprLogicalOperator(String exprLogicalOperator) {
    
    this.exprLogicalOperator = exprLogicalOperator;
    return this;
  }

   /**
   * ExprLogicalOperator defines how multiple Exprs filters (if defined) are evaluated together. Available values: and (&amp;&amp;), or (||) Is optional and if left blank treated as and (&amp;&amp;).
   * @return exprLogicalOperator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ExprLogicalOperator defines how multiple Exprs filters (if defined) are evaluated together. Available values: and (&&), or (||) Is optional and if left blank treated as and (&&).")

  public String getExprLogicalOperator() {
    return exprLogicalOperator;
  }


  public void setExprLogicalOperator(String exprLogicalOperator) {
    this.exprLogicalOperator = exprLogicalOperator;
  }


  public EventDependencyFilter dataLogicalOperator(String dataLogicalOperator) {
    
    this.dataLogicalOperator = dataLogicalOperator;
    return this;
  }

   /**
   * DataLogicalOperator defines how multiple Data filters (if defined) are evaluated together. Available values: and (&amp;&amp;), or (||) Is optional and if left blank treated as and (&amp;&amp;).
   * @return dataLogicalOperator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "DataLogicalOperator defines how multiple Data filters (if defined) are evaluated together. Available values: and (&&), or (||) Is optional and if left blank treated as and (&&).")

  public String getDataLogicalOperator() {
    return dataLogicalOperator;
  }


  public void setDataLogicalOperator(String dataLogicalOperator) {
    this.dataLogicalOperator = dataLogicalOperator;
  }


  public EventDependencyFilter exprs(List<ExprFilter> exprs) {
    
    this.exprs = exprs;
    return this;
  }

  public EventDependencyFilter addExprsItem(ExprFilter exprsItem) {
    if (this.exprs == null) {
      this.exprs = new ArrayList<ExprFilter>();
    }
    this.exprs.add(exprsItem);
    return this;
  }

   /**
   * Exprs contains the list of expressions evaluated against the event payload.
   * @return exprs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Exprs contains the list of expressions evaluated against the event payload.")

  public List<ExprFilter> getExprs() {
    return exprs;
  }


  public void setExprs(List<ExprFilter> exprs) {
    this.exprs = exprs;
  }


  public EventDependencyFilter context(EventContext context) {
    
    this.context = context;
    return this;
  }

   /**
   * Get context
   * @return context
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EventContext getContext() {
    return context;
  }


  public void setContext(EventContext context) {
    this.context = context;
  }


  public EventDependencyFilter time(TimeFilter time) {
    
    this.time = time;
    return this;
  }

   /**
   * Get time
   * @return time
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TimeFilter getTime() {
    return time;
  }


  public void setTime(TimeFilter time) {
    this.time = time;
  }


  public EventDependencyFilter data(List<DataFilter> data) {
    
    this.data = data;
    return this;
  }

  public EventDependencyFilter addDataItem(DataFilter dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<DataFilter>();
    }
    this.data.add(dataItem);
    return this;
  }

   /**
   * Data filter constraints with escalation
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Data filter constraints with escalation")

  public List<DataFilter> getData() {
    return data;
  }


  public void setData(List<DataFilter> data) {
    this.data = data;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventDependencyFilter eventDependencyFilter = (EventDependencyFilter) o;
    return Objects.equals(this.exprLogicalOperator, eventDependencyFilter.exprLogicalOperator) &&
        Objects.equals(this.dataLogicalOperator, eventDependencyFilter.dataLogicalOperator) &&
        Objects.equals(this.exprs, eventDependencyFilter.exprs) &&
        Objects.equals(this.context, eventDependencyFilter.context) &&
        Objects.equals(this.time, eventDependencyFilter.time) &&
        Objects.equals(this.data, eventDependencyFilter.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exprLogicalOperator, dataLogicalOperator, exprs, context, time, data);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventDependencyFilter {\n");
    sb.append("    exprLogicalOperator: ").append(toIndentedString(exprLogicalOperator)).append("\n");
    sb.append("    dataLogicalOperator: ").append(toIndentedString(dataLogicalOperator)).append("\n");
    sb.append("    exprs: ").append(toIndentedString(exprs)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

