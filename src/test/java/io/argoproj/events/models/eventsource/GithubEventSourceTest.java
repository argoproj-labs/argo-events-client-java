/*
 * Argo Events
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.6.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.argoproj.events.models.eventsource;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.argoproj.events.models.eventsource.EventSourceFilter;
import io.argoproj.events.models.eventsource.GithubAppCreds;
import io.argoproj.events.models.eventsource.OwnedRepositories;
import io.argoproj.events.models.eventsource.WebhookContext;
import io.kubernetes.client.openapi.models.V1SecretKeySelector;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for GithubEventSource
 */
public class GithubEventSourceTest {
    private final GithubEventSource model = new GithubEventSource();

    /**
     * Model tests for GithubEventSource
     */
    @Test
    public void testGithubEventSource() {
        // TODO: test GithubEventSource
    }

    /**
     * Test the property 'insecure'
     */
    @Test
    public void insecureTest() {
        // TODO: test insecure
    }

    /**
     * Test the property 'organizations'
     */
    @Test
    public void organizationsTest() {
        // TODO: test organizations
    }

    /**
     * Test the property 'contentType'
     */
    @Test
    public void contentTypeTest() {
        // TODO: test contentType
    }

    /**
     * Test the property 'repository'
     */
    @Test
    public void repositoryTest() {
        // TODO: test repository
    }

    /**
     * Test the property 'githubUploadURL'
     */
    @Test
    public void githubUploadURLTest() {
        // TODO: test githubUploadURL
    }

    /**
     * Test the property 'webhook'
     */
    @Test
    public void webhookTest() {
        // TODO: test webhook
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'repositories'
     */
    @Test
    public void repositoriesTest() {
        // TODO: test repositories
    }

    /**
     * Test the property 'apiToken'
     */
    @Test
    public void apiTokenTest() {
        // TODO: test apiToken
    }

    /**
     * Test the property 'filter'
     */
    @Test
    public void filterTest() {
        // TODO: test filter
    }

    /**
     * Test the property 'owner'
     */
    @Test
    public void ownerTest() {
        // TODO: test owner
    }

    /**
     * Test the property 'githubBaseURL'
     */
    @Test
    public void githubBaseURLTest() {
        // TODO: test githubBaseURL
    }

    /**
     * Test the property 'githubApp'
     */
    @Test
    public void githubAppTest() {
        // TODO: test githubApp
    }

    /**
     * Test the property 'active'
     */
    @Test
    public void activeTest() {
        // TODO: test active
    }

    /**
     * Test the property 'deleteHookOnFinish'
     */
    @Test
    public void deleteHookOnFinishTest() {
        // TODO: test deleteHookOnFinish
    }

    /**
     * Test the property 'events'
     */
    @Test
    public void eventsTest() {
        // TODO: test events
    }

    /**
     * Test the property 'webhookSecret'
     */
    @Test
    public void webhookSecretTest() {
        // TODO: test webhookSecret
    }

    /**
     * Test the property 'metadata'
     */
    @Test
    public void metadataTest() {
        // TODO: test metadata
    }

}
