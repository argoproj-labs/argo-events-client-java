openapi: 3.0.1
info:
  title: Argo Events
  version: v1.0.0
servers:
- url: /
paths: {}
components:
  schemas:
    Template:
      description: Template holds the information of a sensor deployment template
      properties:
        securityContext:
          $ref: '#/components/schemas/v1.PodSecurityContext'
        serviceAccountName:
          description: 'ServiceAccountName is the name of the ServiceAccount to use
            to run gateway pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/'
          type: string
        nodeSelector:
          additionalProperties:
            type: string
          description: 'NodeSelector is a selector which must be true for the pod
            to fit on a node. Selector which must match a node''s labels for the pod
            to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
          type: object
        container:
          $ref: '#/components/schemas/v1.Container'
        volumes:
          description: Volumes is a list of volumes that can be mounted by containers
            in a workflow.
          items:
            $ref: '#/components/schemas/v1.Volume'
          type: array
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: name
        tolerations:
          description: If specified, the pod's tolerations.
          items:
            $ref: '#/components/schemas/v1.Toleration'
          type: array
        metadata:
          $ref: '#/components/schemas/Metadata'
      type: object
    GitArtifact:
      description: GitArtifact contains information about an artifact stored in git
      properties:
        remote:
          $ref: '#/components/schemas/GitRemoteConfig'
        filePath:
          description: Path to file that contains trigger resource definition
          type: string
        url:
          description: Git URL
          type: string
        sshKeyPath:
          description: 'DeprecatedSSHKeyPath is path to your ssh key path. Use this
            if you don''t want to provide username and password. ssh key path must
            be mounted in sensor pod. DEPRECATED: use SSHKeySecret instead.'
          type: string
        tag:
          description: Tag to use to pull trigger resource
          type: string
        sshKeySecret:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        cloneDirectory:
          description: Directory to clone the repository. We clone complete directory
            because GitArtifact is not limited to any specific Git service providers.
            Hence we don't use any specific git provider client.
          type: string
        branch:
          description: Branch to use to pull trigger resource
          type: string
        ref:
          description: Ref to use to pull trigger resource. Will result in a shallow
            clone and fetch.
          type: string
        creds:
          $ref: '#/components/schemas/GitCreds'
      required:
      - cloneDirectory
      - filePath
      - url
      type: object
    EventContext:
      description: EventContext holds the context of the cloudevent received from
        a gateway.
      properties:
        type:
          description: Type - The type of the occurrence which has happened.
          type: string
        source:
          description: Source - A URI describing the event producer.
          type: string
        time:
          $ref: '#/components/schemas/v1.Time'
        datacontenttype:
          description: DataContentType - A MIME (RFC2046) string describing the media
            type of `data`.
          type: string
        specversion:
          description: SpecVersion - The version of the CloudEvents specification
            used by the event.
          type: string
        id:
          description: ID of the event; must be non-empty and unique within the scope
            of the producer.
          type: string
        subject:
          description: Subject - The subject of the event in the context of the event
            producer
          type: string
      required:
      - datacontenttype
      - id
      - source
      - specversion
      - subject
      - time
      - type
      type: object
    K8SResourcePolicy:
      description: K8SResourcePolicy refers to the policy used to check the state
        of K8s based triggers using labels
      properties:
        labels:
          additionalProperties:
            type: string
          description: Labels required to identify whether a resource is in success
            state
          type: object
        errorOnBackoffTimeout:
          description: ErrorOnBackoffTimeout determines whether sensor should transition
            to error state if the trigger policy is unable to determine the state
            of the resource
          type: boolean
        backoff:
          $ref: '#/components/schemas/Backoff'
      required:
      - backoff
      - errorOnBackoffTimeout
      type: object
    BasicAuth:
      description: BasicAuth contains the reference to K8s secrets that holds the
        username and password
      properties:
        username:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        password:
          $ref: '#/components/schemas/v1.SecretKeySelector'
      type: object
    Trigger:
      description: Trigger is an action taken, output produced, an event created,
        a message sent
      properties:
        policy:
          $ref: '#/components/schemas/TriggerPolicy'
        template:
          $ref: '#/components/schemas/TriggerTemplate'
        parameters:
          description: Parameters is the list of parameters applied to the trigger
            template definition
          items:
            $ref: '#/components/schemas/TriggerParameter'
          type: array
      type: object
    ArtifactLocation:
      description: ArtifactLocation describes the source location for an external
        artifact
      properties:
        configmap:
          $ref: '#/components/schemas/v1.ConfigMapKeySelector'
        git:
          $ref: '#/components/schemas/GitArtifact'
        resource:
          $ref: '#/components/schemas/Resource'
        s3:
          $ref: '#/components/schemas/S3Artifact'
        url:
          $ref: '#/components/schemas/URLArtifact'
        file:
          $ref: '#/components/schemas/FileArtifact'
        inline:
          description: Inline artifact is embedded in sensor spec as a string
          type: string
      type: object
    SensorStatus:
      description: SensorStatus contains information about the status of a sensor.
      properties:
        conditions:
          description: Conditions are the latest available observations of a resource's
            current state.
          items:
            $ref: '#/components/schemas/Condition'
          type: array
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: type
      type: object
    ArgoWorkflowTrigger:
      description: ArgoWorkflowTrigger is the trigger for the Argo Workflow
      properties:
        resource:
          type: string
        parameters:
          items:
            $ref: '#/components/schemas/TriggerParameter'
          type: array
        source:
          $ref: '#/components/schemas/ArtifactLocation'
        version:
          type: string
        group:
          type: string
        operation:
          description: Operation refers to the type of operation performed on the
            argo workflow resource. Default value is Submit.
          type: string
      required:
      - group
      - resource
      - version
      type: object
    StatusPolicy:
      description: StatusPolicy refers to the policy used to check the state of the
        trigger using response status
      properties:
        allow:
          items:
            format: int32
            type: integer
          type: array
      required:
      - allow
      type: object
    FileArtifact:
      description: FileArtifact contains information about an artifact in a filesystem
      properties:
        path:
          type: string
      type: object
    StandardK8STrigger:
      description: StandardK8STrigger is the standard Kubernetes resource trigger
      properties:
        resource:
          type: string
        parameters:
          items:
            $ref: '#/components/schemas/TriggerParameter'
          type: array
        liveObject:
          description: LiveObject specifies whether the resource should be directly
            fetched from K8s instead of being marshaled from the resource artifact.
            If set to true, the resource artifact must contain the information required
            to uniquely identify the resource in the cluster, that is, you must specify
            "apiVersion", "kind" as well as "name" and "namespace" meta data. Only
            valid for operation type `update`
          type: boolean
        patchStrategy:
          description: 'PatchStrategy controls the K8s object patching strategy when
            the trigger operation is specified as patch. possible values: "application/json-patch+json"
            "application/merge-patch+json" "application/strategic-merge-patch+json"
            "application/apply-patch+yaml". Defaults to "application/merge-patch+json"'
          type: string
        source:
          $ref: '#/components/schemas/ArtifactLocation'
        version:
          type: string
        group:
          type: string
        operation:
          description: Operation refers to the type of operation performed on the
            k8s resource. Default value is Create.
          type: string
      required:
      - group
      - resource
      - version
      type: object
    CustomTrigger:
      description: CustomTrigger refers to the specification of the custom trigger.
      properties:
        serverNameOverride:
          description: ServerNameOverride for the secure connection between sensor
            and custom trigger gRPC server.
          type: string
        secure:
          description: Secure refers to type of the connection between sensor to custom
            trigger gRPC
          type: boolean
        parameters:
          items:
            $ref: '#/components/schemas/TriggerParameter'
          type: array
        spec:
          additionalProperties:
            type: string
          description: Spec is the custom trigger resource specification that custom
            trigger gRPC server knows how to interpret.
          type: object
        certFilePath:
          description: 'DeprecatedCertFilePath is path to the cert file within sensor
            for secure connection between sensor and custom trigger gRPC server. DEPRECATED:
            use CertSecret instead'
          type: string
        serverURL:
          description: ServerURL is the url of the gRPC server that executes custom
            trigger
          type: string
        certSecret:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        payload:
          items:
            $ref: '#/components/schemas/TriggerParameter'
          type: array
      required:
      - payload
      - secure
      - serverURL
      - spec
      type: object
    DataFilter:
      description: 'DataFilter describes constraints and filters for event data Regular
        Expressions are purposefully not a feature as they are overkill for our uses
        here See Rob Pike''s Post: https://commandcenter.blogspot.com/2011/08/regular-expressions-in-lexing-and.html'
      properties:
        path:
          description: Path is the JSONPath of the event's (JSON decoded) data key
            Path is a series of keys separated by a dot. A key may contain wildcard
            characters '*' and '?'. To access an array value use the index as the
            key. The dot and wildcard characters can be escaped with '\'. See https://github.com/tidwall/gjson#path-syntax
            for more information on how to use this.
          type: string
        type:
          description: Type contains the JSON type of the data
          type: string
        value:
          description: Value is the allowed string values for this key Booleans are
            passed using strconv.ParseBool() Numbers are parsed using as float64 using
            strconv.ParseFloat() Strings are taken as is Nils this value is ignored
          items:
            type: string
          type: array
        comparator:
          description: Comparator compares the event data with a user given value.
            Can be ">=", ">", "=", "!=", "<", or "<=". Is optional, and if left blank
            treated as equality "=".
          type: string
      required:
      - path
      - type
      - value
      type: object
    OpenWhiskTrigger:
      description: OpenWhiskTrigger refers to the specification of the OpenWhisk trigger.
      properties:
        authToken:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        actionName:
          description: Name of the action/function.
          type: string
        parameters:
          items:
            $ref: '#/components/schemas/TriggerParameter'
          type: array
        namespace:
          description: Namespace for the action. Defaults to "_".
          type: string
        host:
          description: Host URL of the OpenWhisk.
          type: string
        version:
          description: Version for the API. Defaults to v1.
          type: string
        payload:
          items:
            $ref: '#/components/schemas/TriggerParameter'
          type: array
      required:
      - actionName
      - host
      - payload
      type: object
    SlackTrigger:
      description: SlackTrigger refers to the specification of the slack notification
        trigger.
      properties:
        message:
          description: Message refers to the message to send to the Slack channel.
          type: string
        parameters:
          items:
            $ref: '#/components/schemas/TriggerParameter'
          type: array
        channel:
          description: Channel refers to which Slack channel to send slack message.
          type: string
        slackToken:
          $ref: '#/components/schemas/v1.SecretKeySelector'
      type: object
    SensorSpec:
      description: SensorSpec represents desired sensor state
      properties:
        circuit:
          description: 'Circuit is a boolean expression of dependency groups DEPRECATED:
            Use Switch in triggers instead.'
          type: string
        triggers:
          description: Triggers is a list of the things that this sensor evokes. These
            are the outputs from this sensor.
          items:
            $ref: '#/components/schemas/Trigger'
          type: array
        eventBusName:
          description: EventBusName references to a EventBus name. By default the
            value is "default"
          type: string
        dependencies:
          description: Dependencies is a list of the events that this sensor is dependent
            on.
          items:
            $ref: '#/components/schemas/EventDependency'
          type: array
        template:
          $ref: '#/components/schemas/Template'
        dependencyGroups:
          description: DependencyGroups is a list of the groups of events.
          items:
            $ref: '#/components/schemas/DependencyGroup'
          type: array
        errorOnFailedRound:
          description: ErrorOnFailedRound if set to true, marks sensor state as `error`
            if the previous trigger round fails. Once sensor state is set to `error`,
            no further triggers will be processed.
          type: boolean
      required:
      - dependencies
      - triggers
      type: object
    AWSLambdaTrigger:
      description: AWSLambdaTrigger refers to specification of the trigger to invoke
        an AWS Lambda function
      properties:
        functionName:
          description: FunctionName refers to the name of the function to invoke.
          type: string
        parameters:
          items:
            $ref: '#/components/schemas/TriggerParameter'
          type: array
        region:
          description: Region is AWS region
          type: string
        payload:
          items:
            $ref: '#/components/schemas/TriggerParameter'
          type: array
        secretKey:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        accessKey:
          $ref: '#/components/schemas/v1.SecretKeySelector'
      required:
      - functionName
      - payload
      - region
      type: object
    KafkaTrigger:
      description: KafkaTrigger refers to the specification of the Kafka trigger.
      properties:
        tls:
          $ref: '#/components/schemas/TLSConfig'
        partitioningKey:
          description: The partitioning key for the messages put on the Kafka topic.
            Defaults to broker url.
          type: string
        parameters:
          items:
            $ref: '#/components/schemas/TriggerParameter'
          type: array
        url:
          description: URL of the Kafka broker.
          type: string
        partition:
          description: Partition to write data to.
          format: int32
          type: integer
        compress:
          description: Compress determines whether to compress message or not. Defaults
            to false. If set to true, compresses message using snappy compression.
          type: boolean
        topic:
          description: Name of the topic. More info at https://kafka.apache.org/documentation/#intro_topics
          type: string
        requiredAcks:
          description: RequiredAcks used in producer to tell the broker how many replica
            acknowledgements Defaults to 1 (Only wait for the leader to ack).
          format: int32
          type: integer
        flushFrequency:
          description: FlushFrequency refers to the frequency in milliseconds to flush
            batches. Defaults to 500 milliseconds.
          format: int32
          type: integer
        payload:
          items:
            $ref: '#/components/schemas/TriggerParameter'
          type: array
      required:
      - partition
      - payload
      - topic
      - url
      type: object
    TriggerPolicy:
      description: TriggerPolicy dictates the policy for the trigger retries
      properties:
        status:
          $ref: '#/components/schemas/StatusPolicy'
        k8s:
          $ref: '#/components/schemas/K8SResourcePolicy'
      type: object
    NATSTrigger:
      description: NATSTrigger refers to the specification of the NATS trigger.
      properties:
        tls:
          $ref: '#/components/schemas/TLSConfig'
        url:
          description: URL of the NATS cluster.
          type: string
        payload:
          items:
            $ref: '#/components/schemas/TriggerParameter'
          type: array
        parameters:
          items:
            $ref: '#/components/schemas/TriggerParameter'
          type: array
        subject:
          description: Name of the subject to put message on.
          type: string
      required:
      - payload
      - subject
      - url
      type: object
    TriggerSwitch:
      description: TriggerSwitch describes condition which must be satisfied in order
        to execute a trigger. Depending upon condition type, status of dependency
        groups is used to evaluate the result. DEPRECATED
      properties:
        all:
          description: All acts as a AND operator between dependencies
          items:
            type: string
          type: array
        any:
          description: Any acts as a OR operator between dependencies
          items:
            type: string
          type: array
      type: object
    HTTPTrigger:
      description: HTTPTrigger is the trigger for the HTTP request
      properties:
        tls:
          $ref: '#/components/schemas/TLSConfig'
        parameters:
          items:
            $ref: '#/components/schemas/TriggerParameter'
          type: array
        url:
          description: URL refers to the URL to send HTTP request to.
          type: string
        basicAuth:
          $ref: '#/components/schemas/BasicAuth'
        method:
          description: Method refers to the type of the HTTP request. Refer https://golang.org/src/net/http/method.go
            for more info. Default value is POST.
          type: string
        headers:
          additionalProperties:
            type: string
          description: Headers for the HTTP request.
          type: object
        timeout:
          description: Timeout refers to the HTTP request timeout in seconds. Default
            value is 60 seconds.
          format: int64
          type: integer
        payload:
          items:
            $ref: '#/components/schemas/TriggerParameter'
          type: array
      required:
      - payload
      - url
      type: object
    Sensor:
      description: Sensor is the definition of a sensor resource
      properties:
        status:
          $ref: '#/components/schemas/SensorStatus'
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        spec:
          $ref: '#/components/schemas/SensorSpec'
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        metadata:
          $ref: '#/components/schemas/v1.ObjectMeta'
      required:
      - metadata
      - spec
      - status
      type: object
    GitRemoteConfig:
      description: GitRemoteConfig contains the configuration of a Git remote
      properties:
        name:
          description: Name of the remote to fetch from.
          type: string
        urls:
          description: URLs the URLs of a remote repository. It must be non-empty.
            Fetch will always use the first URL, while push will use all of them.
          items:
            type: string
          type: array
      required:
      - name
      - urls
      type: object
    GitCreds:
      description: GitCreds contain reference to git username and password
      properties:
        username:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        password:
          $ref: '#/components/schemas/v1.SecretKeySelector'
      type: object
    Metadata:
      description: Metadata holds the annotations and labels of an event source pod
      properties:
        labels:
          additionalProperties:
            type: string
          type: object
        annotations:
          additionalProperties:
            type: string
          type: object
      type: object
    TriggerTemplate:
      description: TriggerTemplate is the template that describes trigger specification.
      properties:
        kafka:
          $ref: '#/components/schemas/KafkaTrigger'
        http:
          $ref: '#/components/schemas/HTTPTrigger'
        name:
          description: Name is a unique name of the action to take.
          type: string
        nats:
          $ref: '#/components/schemas/NATSTrigger'
        custom:
          $ref: '#/components/schemas/CustomTrigger'
        awsLambda:
          $ref: '#/components/schemas/AWSLambdaTrigger'
        openWhisk:
          $ref: '#/components/schemas/OpenWhiskTrigger'
        switch:
          $ref: '#/components/schemas/TriggerSwitch'
        argoWorkflow:
          $ref: '#/components/schemas/ArgoWorkflowTrigger'
        k8s:
          $ref: '#/components/schemas/StandardK8STrigger'
        conditions:
          description: 'Conditions is the conditions to execute the trigger. For example:
            "(dep01 || dep02) && dep04"'
          type: string
        slack:
          $ref: '#/components/schemas/SlackTrigger'
      required:
      - name
      type: object
    EventDependency:
      description: EventDependency describes a dependency
      properties:
        eventName:
          description: EventName is the name of the event
          type: string
        eventSourceName:
          description: EventSourceName is the name of EventSource that Sensor depends
            on
          type: string
        filters:
          $ref: '#/components/schemas/EventDependencyFilter'
        name:
          description: Name is a unique name of this dependency
          type: string
      required:
      - eventName
      - eventSourceName
      - name
      type: object
    URLArtifact:
      description: URLArtifact contains information about an artifact at an http endpoint.
      properties:
        path:
          description: Path is the complete URL
          type: string
        verifyCert:
          description: VerifyCert decides whether the connection is secure or not
          type: boolean
      required:
      - path
      type: object
    DependencyGroup:
      description: DependencyGroup is the group of dependencies
      properties:
        dependencies:
          description: Dependencies of events
          items:
            type: string
          type: array
        name:
          description: Name of the group
          type: string
      required:
      - dependencies
      - name
      type: object
    TimeFilter:
      description: TimeFilter describes a window in time. It filters out events that
        occur outside the time limits. In other words, only events that occur after
        Start and before Stop will pass this filter.
      properties:
        start:
          description: Start is the beginning of a time window in UTC. Before this
            time, events for this dependency are ignored. Format is hh:mm:ss.
          type: string
        stop:
          description: 'Stop is the end of a time window in UTC. After or equal to
            this time, events for this dependency are ignored and Format is hh:mm:ss.
            If it is smaller than Start, it is treated as next day of Start (e.g.:
            22:00:00-01:00:00 means 22:00:00-25:00:00).'
          type: string
      required:
      - start
      - stop
      type: object
    TriggerParameter:
      description: TriggerParameter indicates a passed parameter to a service template
      properties:
        dest:
          description: Dest is the JSONPath of a resource key. A path is a series
            of keys separated by a dot. The colon character can be escaped with '.'
            The -1 key can be used to append a value to an existing array. See https://github.com/tidwall/sjson#path-syntax
            for more information about how this is used.
          type: string
        src:
          $ref: '#/components/schemas/TriggerParameterSource'
        operation:
          description: Operation is what to do with the existing value at Dest, whether
            to 'prepend', 'overwrite', or 'append' it.
          type: string
      required:
      - dest
      type: object
    EventDependencyFilter:
      description: EventDependencyFilter defines filters and constraints for a event.
      properties:
        data:
          description: Data filter constraints with escalation
          items:
            $ref: '#/components/schemas/DataFilter'
          type: array
        name:
          description: Name is the name of event filter
          type: string
        context:
          $ref: '#/components/schemas/EventContext'
        time:
          $ref: '#/components/schemas/TimeFilter'
      required:
      - name
      type: object
    TriggerParameterSource:
      description: TriggerParameterSource defines the source for a parameter from
        a event event
      properties:
        dependencyName:
          description: DependencyName refers to the name of the dependency. The event
            which is stored for this dependency is used as payload for the parameterization.
            Make sure to refer to one of the dependencies you have defined under Dependencies
            list.
          type: string
        value:
          description: Value is the default literal value to use for this parameter
            source This is only used if the DataKey is invalid. If the DataKey is
            invalid and this is not defined, this param source will produce an error.
          type: string
        contextTemplate:
          description: ContextTemplate is a go-template for extracting a string from
            the event's context. If a ContextTemplate is provided with a ContextKey,
            the template will be evaluated first and fallback to the ContextKey. The
            templating follows the standard go-template syntax as well as sprig's
            extra functions. See https://pkg.go.dev/text/template and https://masterminds.github.io/sprig/
          type: string
        contextKey:
          description: ContextKey is the JSONPath of the event's (JSON decoded) context
            key ContextKey is a series of keys separated by a dot. A key may contain
            wildcard characters '*' and '?'. To access an array value use the index
            as the key. The dot and wildcard characters can be escaped with '\'. See
            https://github.com/tidwall/gjson#path-syntax for more information on how
            to use this.
          type: string
        dataKey:
          description: DataKey is the JSONPath of the event's (JSON decoded) data
            key DataKey is a series of keys separated by a dot. A key may contain
            wildcard characters '*' and '?'. To access an array value use the index
            as the key. The dot and wildcard characters can be escaped with '\'. See
            https://github.com/tidwall/gjson#path-syntax for more information on how
            to use this.
          type: string
        dataTemplate:
          description: DataTemplate is a go-template for extracting a string from
            the event's data. If a DataTemplate is provided with a DataKey, the template
            will be evaluated first and fallback to the DataKey. The templating follows
            the standard go-template syntax as well as sprig's extra functions. See
            https://pkg.go.dev/text/template and https://masterminds.github.io/sprig/
          type: string
      required:
      - dependencyName
      type: object

