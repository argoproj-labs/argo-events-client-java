openapi: 3.0.1
info:
  title: Argo Events
  version: v1.0.0
servers:
- url: /
paths: {}
components:
  schemas:
    SQSEventSource:
      description: SQSEventSource refers to event-source for AWS SQS related events
      properties:
        secretKey:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        queueAccountId:
          description: QueueAccountID is the ID of the account that created the queue
            to monitor
          type: string
        region:
          description: Region is AWS region
          type: string
        roleARN:
          description: RoleARN is the Amazon Resource Name (ARN) of the role to assume.
          type: string
        queue:
          description: Queue is AWS SQS queue to listen to for messages
          type: string
        waitTimeSeconds:
          description: WaitTimeSeconds is The duration (in seconds) for which the
            call waits for a message to arrive in the queue before returning.
          format: int64
          type: integer
        jsonBody:
          description: JSONBody specifies that all event body payload coming from
            this source will be JSON
          type: boolean
        accessKey:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        metadata:
          additionalProperties:
            type: string
          description: Metadata holds the user defined metadata which will passed
            along the event payload.
          type: object
      required:
      - queue
      - region
      - waitTimeSeconds
      type: object
    PubSubEventSource:
      description: PubSubEventSource refers to event-source for GCP PubSub related
        events.
      properties:
        topicProjectID:
          description: TopicProjectID identifies the project where the topic should
            exist or be created (assumed to be the same as ProjectID by default)
          type: string
        projectID:
          description: ProjectID is the unique identifier for your project on GCP
          type: string
        deleteSubscriptionOnFinish:
          description: DeleteSubscriptionOnFinish determines whether to delete the
            GCP PubSub subscription once the event source is stopped.
          type: boolean
        topic:
          description: Topic on which a subscription will be created
          type: string
        credentialSecret:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        subscriptionID:
          description: SubscriptionID is given then use it instead of creating a new
            one
          type: string
        credentialsFile:
          description: CredentialsFile is the file that contains credentials to authenticate
            for GCP Deprecated, use CredentialSecret instead
          type: string
        jsonBody:
          description: JSONBody specifies that all event body payload coming from
            this source will be JSON
          type: boolean
        metadata:
          additionalProperties:
            type: string
          description: Metadata holds the user defined metadata which will passed
            along the event payload.
          type: object
      required:
      - credentialsFile
      - projectID
      - topicProjectID
      type: object
    GitlabEventSource:
      description: GitlabEventSource refers to event-source related to Gitlab events
      properties:
        accessToken:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        enableSSLVerification:
          description: EnableSSLVerification to enable ssl verification
          type: boolean
        gitlabBaseURL:
          description: GitlabBaseURL is the base URL for API requests to a custom
            endpoint
          type: string
        webhook:
          $ref: '#/components/schemas/WebhookContext'
        projectID:
          description: ProjectID is the id of project for which integration needs
            to setup
          type: string
        deleteHookOnFinish:
          description: DeleteHookOnFinish determines whether to delete the GitLab
            hook for the project once the event source is stopped.
          type: boolean
        events:
          description: Events are gitlab event to listen to. Refer https://github.com/xanzy/go-gitlab/blob/bf34eca5d13a9f4c3f501d8a97b8ac226d55e4d9/projects.go#L794.
          items:
            type: string
          type: array
        metadata:
          additionalProperties:
            type: string
          description: Metadata holds the user defined metadata which will passed
            along the event payload.
          type: object
      required:
      - events
      - gitlabBaseURL
      - projectID
      type: object
    KafkaConsumerGroup:
      properties:
        groupName:
          description: The name for the consumer group to use
          type: string
        oldest:
          description: When starting up a new group do we want to start from the oldest
            event (true) or the newest event (false), defaults to false
          type: boolean
        rebalanceStrategy:
          description: 'Rebalance strategy can be one of: sticky, roundrobin, range.
            Range is the default.'
          type: string
      required:
      - groupName
      type: object
    KafkaEventSource:
      description: KafkaEventSource refers to event-source for Kafka related events
      properties:
        tls:
          $ref: '#/components/schemas/TLSConfig'
        connectionBackoff:
          $ref: '#/components/schemas/Backoff'
        consumerGroup:
          $ref: '#/components/schemas/KafkaConsumerGroup'
        jsonBody:
          description: JSONBody specifies that all event body payload coming from
            this source will be JSON
          type: boolean
        partition:
          description: Partition name
          type: string
        topic:
          description: Topic name
          type: string
        url:
          description: URL to kafka cluster
          type: string
        version:
          description: Specify what kafka version is being connected to enables certain
            features in sarama, defaults to 1.0.0
          type: string
        limitEventsPerSecond:
          description: Sets a limit on how many events get read from kafka per second.
          format: int64
          type: integer
        metadata:
          additionalProperties:
            type: string
          description: Metadata holds the user defined metadata which will passed
            along the event payload.
          type: object
      required:
      - partition
      - topic
      - url
      type: object
    AzureEventsHubEventSource:
      description: AzureEventsHubEventSource describes the event source for azure
        events hub More info at https://docs.microsoft.com/en-us/azure/event-hubs/
      properties:
        sharedAccessKeyName:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        sharedAccessKey:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        hubName:
          description: Event Hub path/name
          type: string
        fqdn:
          description: FQDN of the EventHubs namespace you created More info at https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string
          type: string
        metadata:
          additionalProperties:
            type: string
          description: Metadata holds the user defined metadata which will passed
            along the event payload.
          type: object
      required:
      - fqdn
      - hubName
      type: object
    NATSEventsSource:
      description: NATSEventsSource refers to event-source for NATS related events
      properties:
        tls:
          $ref: '#/components/schemas/TLSConfig'
        connectionBackoff:
          $ref: '#/components/schemas/Backoff'
        url:
          description: URL to connect to NATS cluster
          type: string
        jsonBody:
          description: JSONBody specifies that all event body payload coming from
            this source will be JSON
          type: boolean
        metadata:
          additionalProperties:
            type: string
          description: Metadata holds the user defined metadata which will passed
            along the event payload.
          type: object
        subject:
          description: Subject holds the name of the subject onto which messages are
            published
          type: string
      required:
      - subject
      - url
      type: object
    StripeEventSource:
      description: StripeEventSource describes the event source for stripe webhook
        notifications More info at https://stripe.com/docs/webhooks
      properties:
        createWebhook:
          description: CreateWebhook if specified creates a new webhook programmatically.
          type: boolean
        apiKey:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        webhook:
          $ref: '#/components/schemas/WebhookContext'
        eventFilter:
          description: EventFilter describes the type of events to listen to. If not
            specified, all types of events will be processed. More info at https://stripe.com/docs/api/events/list
          items:
            type: string
          type: array
        metadata:
          additionalProperties:
            type: string
          description: Metadata holds the user defined metadata which will passed
            along the event payload.
          type: object
      type: object
    Metadata:
      description: Metadata holds the annotations and labels of an event source pod
      properties:
        labels:
          additionalProperties:
            type: string
          type: object
        annotations:
          additionalProperties:
            type: string
          type: object
      type: object
    RedisEventSource:
      description: RedisEventSource describes an event source for the Redis PubSub.
        More info at https://godoc.org/github.com/go-redis/redis#example-PubSub
      properties:
        tls:
          $ref: '#/components/schemas/TLSConfig'
        db:
          description: DB to use. If not specified, default DB 0 will be used.
          format: int32
          type: integer
        namespace:
          description: Namespace to use to retrieve the password from. It should only
            be specified if password is declared
          type: string
        channels:
          items:
            type: string
          type: array
        hostAddress:
          description: HostAddress refers to the address of the Redis host/server
          type: string
        password:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        metadata:
          additionalProperties:
            type: string
          description: Metadata holds the user defined metadata which will passed
            along the event payload.
          type: object
      required:
      - channels
      - hostAddress
      type: object
    GithubEventSource:
      description: GithubEventSource refers to event-source for github related events
      properties:
        insecure:
          description: Insecure tls verification
          type: boolean
        webhookSecret:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        contentType:
          description: ContentType of the event delivery
          type: string
        repository:
          description: Repository refers to GitHub repo name i.e. argo-events
          type: string
        githubUploadURL:
          description: GitHub upload URL (for GitHub Enterprise)
          type: string
        id:
          description: Id is the webhook's id
          format: int64
          type: integer
        webhook:
          $ref: '#/components/schemas/WebhookContext'
        apiToken:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        owner:
          description: Owner refers to GitHub owner name i.e. argoproj
          type: string
        githubBaseURL:
          description: GitHub base URL (for GitHub Enterprise)
          type: string
        active:
          description: Active refers to status of the webhook for event deliveries.
            https://developer.github.com/webhooks/creating/#active
          type: boolean
        deleteHookOnFinish:
          description: DeleteHookOnFinish determines whether to delete the GitHub
            hook for the repository once the event source is stopped.
          type: boolean
        events:
          items:
            type: string
          type: array
        metadata:
          additionalProperties:
            type: string
          description: Metadata holds the user defined metadata which will passed
            along the event payload.
          type: object
      required:
      - events
      - id
      - owner
      - repository
      type: object
    StorageGridFilter:
      description: StorageGridFilter represents filters to apply to bucket notifications
        for specifying constraints on objects
      properties:
        prefix:
          type: string
        suffix:
          type: string
      required:
      - prefix
      - suffix
      type: object
    Selector:
      description: Selector represents conditional operation to select K8s objects.
      properties:
        operation:
          description: Supported operations like ==, !=, <=, >= etc. Defaults to ==.
            Refer https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
            for more info.
          type: string
        value:
          description: Value
          type: string
        key:
          description: Key name
          type: string
      required:
      - key
      - value
      type: object
    SlackEventSource:
      description: SlackEventSource refers to event-source for Slack related events
      properties:
        signingSecret:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        token:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        webhook:
          $ref: '#/components/schemas/WebhookContext'
        metadata:
          additionalProperties:
            type: string
          description: Metadata holds the user defined metadata which will passed
            along the event payload.
          type: object
      type: object
    AMQPEventSource:
      description: AMQPEventSource refers to an event-source for AMQP stream events
      properties:
        tls:
          $ref: '#/components/schemas/TLSConfig'
        connectionBackoff:
          $ref: '#/components/schemas/Backoff'
        routingKey:
          description: Routing key for bindings
          type: string
        url:
          description: URL for rabbitmq service
          type: string
        jsonBody:
          description: JSONBody specifies that all event body payload coming from
            this source will be JSON
          type: boolean
        exchangeName:
          description: ExchangeName is the exchange name For more information, visit
            https://www.rabbitmq.com/tutorials/amqp-concepts.html
          type: string
        exchangeType:
          description: ExchangeType is rabbitmq exchange type
          type: string
        metadata:
          additionalProperties:
            type: string
          description: Metadata holds the user defined metadata which will passed
            along the event payload.
          type: object
      required:
      - exchangeName
      - exchangeType
      - routingKey
      - url
      type: object
    EmitterEventSource:
      description: EmitterEventSource describes the event source for emitter More
        info at https://emitter.io/develop/getting-started/
      properties:
        tls:
          $ref: '#/components/schemas/TLSConfig'
        connectionBackoff:
          $ref: '#/components/schemas/Backoff'
        password:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        jsonBody:
          description: JSONBody specifies that all event body payload coming from
            this source will be JSON
          type: boolean
        broker:
          description: Broker URI to connect to.
          type: string
        username:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        channelName:
          description: ChannelName refers to the channel name
          type: string
        channelKey:
          description: ChannelKey refers to the channel key
          type: string
        metadata:
          additionalProperties:
            type: string
          description: Metadata holds the user defined metadata which will passed
            along the event payload.
          type: object
      required:
      - broker
      - channelKey
      - channelName
      type: object
    EventSourceSpec:
      description: EventSourceSpec refers to specification of event-source resource
      properties:
        gitlab:
          additionalProperties:
            $ref: '#/components/schemas/GitlabEventSource'
          description: Gitlab event sources
          type: object
        minio:
          additionalProperties:
            $ref: '#/components/schemas/S3Artifact'
          description: Minio event sources
          type: object
        kafka:
          additionalProperties:
            $ref: '#/components/schemas/KafkaEventSource'
          description: Kafka event sources
          type: object
        replica:
          description: Replica is the gateway deployment replicas
          format: int32
          type: integer
        file:
          additionalProperties:
            $ref: '#/components/schemas/FileEventSource'
          description: File event sources
          type: object
        nsq:
          additionalProperties:
            $ref: '#/components/schemas/NSQEventSource'
          description: NSQ event source
          type: object
        pulsar:
          additionalProperties:
            $ref: '#/components/schemas/PulsarEventSource'
          description: Pulsar event source
          type: object
        calendar:
          additionalProperties:
            $ref: '#/components/schemas/CalendarEventSource'
          description: Calendar event sources
          type: object
        hdfs:
          additionalProperties:
            $ref: '#/components/schemas/HDFSEventSource'
          description: HDFS event sources
          type: object
        amqp:
          additionalProperties:
            $ref: '#/components/schemas/AMQPEventSource'
          description: AMQP event sources
          type: object
        service:
          $ref: '#/components/schemas/Service'
        generic:
          additionalProperties:
            $ref: '#/components/schemas/GenericEventSource'
          description: Generic event source
          type: object
        redis:
          additionalProperties:
            $ref: '#/components/schemas/RedisEventSource'
          description: Redis event source
          type: object
        mqtt:
          additionalProperties:
            $ref: '#/components/schemas/MQTTEventSource'
          description: MQTT event sources
          type: object
        template:
          $ref: '#/components/schemas/Template'
        sqs:
          additionalProperties:
            $ref: '#/components/schemas/SQSEventSource'
          description: SQS event sources
          type: object
        webhook:
          additionalProperties:
            $ref: '#/components/schemas/WebhookContext'
          description: Webhook event sources
          type: object
        azureEventsHub:
          additionalProperties:
            $ref: '#/components/schemas/AzureEventsHubEventSource'
          description: AzureEventsHub event sources
          type: object
        sns:
          additionalProperties:
            $ref: '#/components/schemas/SNSEventSource'
          description: SNS event sources
          type: object
        emitter:
          additionalProperties:
            $ref: '#/components/schemas/EmitterEventSource'
          description: Emitter event source
          type: object
        pubSub:
          additionalProperties:
            $ref: '#/components/schemas/PubSubEventSource'
          description: PubSub eevnt sources
          type: object
        github:
          additionalProperties:
            $ref: '#/components/schemas/GithubEventSource'
          description: Github event sources
          type: object
        resource:
          additionalProperties:
            $ref: '#/components/schemas/ResourceEventSource'
          description: Resource event sources
          type: object
        slack:
          additionalProperties:
            $ref: '#/components/schemas/SlackEventSource'
          description: Slack event sources
          type: object
        eventBusName:
          description: EventBusName references to a EventBus name. By default the
            value is "default"
          type: string
        nats:
          additionalProperties:
            $ref: '#/components/schemas/NATSEventsSource'
          description: NATS event sources
          type: object
        storageGrid:
          additionalProperties:
            $ref: '#/components/schemas/StorageGridEventSource'
          description: StorageGrid event sources
          type: object
        stripe:
          additionalProperties:
            $ref: '#/components/schemas/StripeEventSource'
          description: Stripe event sources
          type: object
      type: object
    FileEventSource:
      description: FileEventSource describes an event-source for file related events.
      properties:
        eventType:
          description: Type of file operations to watch Refer https://github.com/fsnotify/fsnotify/blob/master/fsnotify.go
            for more information
          type: string
        watchPathConfig:
          $ref: '#/components/schemas/WatchPathConfig'
        polling:
          description: Use polling instead of inotify
          type: boolean
        metadata:
          additionalProperties:
            type: string
          description: Metadata holds the user defined metadata which will passed
            along the event payload.
          type: object
      required:
      - eventType
      - watchPathConfig
      type: object
    ResourceFilter:
      description: ResourceFilter contains K8 ObjectMeta information to further filter
        resource event objects
      properties:
        fields:
          description: Fields provide listing options to K8s API to watch resource/s.
            Refer https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/
            for more info.
          items:
            $ref: '#/components/schemas/Selector'
          type: array
        prefix:
          description: Prefix filter is applied on the resource name.
          type: string
        labels:
          description: Labels provide listing options to K8s API to watch resource/s.
            Refer https://kubernetes.io/docs/concepts/overview/working-with-objects/label-selectors/
            for more info.
          items:
            $ref: '#/components/schemas/Selector'
          type: array
        afterStart:
          description: If the resource is created after the start time then the event
            is treated as valid.
          type: boolean
        createdBy:
          $ref: '#/components/schemas/v1.Time'
      type: object
    EventSourceStatus:
      description: EventSourceStatus holds the status of the event-source resource
      properties:
        conditions:
          description: Conditions are the latest available observations of a resource's
            current state.
          items:
            $ref: '#/components/schemas/Condition'
          type: array
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: type
      type: object
    WatchPathConfig:
      properties:
        directory:
          description: Directory to watch for events
          type: string
        path:
          description: Path is relative path of object to watch with respect to the
            directory
          type: string
        pathRegexp:
          description: PathRegexp is regexp of relative path of object to watch with
            respect to the directory
          type: string
      required:
      - directory
      type: object
    CalendarEventSource:
      description: CalendarEventSource describes a time based dependency. One of the
        fields (schedule, interval, or recurrence) must be passed. Schedule takes
        precedence over interval; interval takes precedence over recurrence
      properties:
        schedule:
          description: 'Schedule is a cron-like expression. For reference, see: https://en.wikipedia.org/wiki/Cron'
          type: string
        interval:
          description: Interval is a string that describes an interval duration, e.g.
            1s, 30m, 2h...
          type: string
        timezone:
          description: Timezone in which to run the schedule
          type: string
        userPayload:
          description: UserPayload will be sent to sensor as extra data once the event
            is triggered Deprecated. Please use Metadata instead.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        exclusionDates:
          items:
            type: string
          type: array
        metadata:
          additionalProperties:
            type: string
          description: Metadata holds the user defined metadata which will passed
            along the event payload.
          type: object
      required:
      - interval
      - schedule
      type: object
    Template:
      description: Template holds the information of an EventSource deployment template
      properties:
        container:
          $ref: '#/components/schemas/v1.Container'
        serviceAccountName:
          description: 'ServiceAccountName is the name of the ServiceAccount to use
            to run event source pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/'
          type: string
        nodeSelector:
          additionalProperties:
            type: string
          description: 'NodeSelector is a selector which must be true for the pod
            to fit on a node. Selector which must match a node''s labels for the pod
            to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
          type: object
        affinity:
          $ref: '#/components/schemas/v1.Affinity'
        volumes:
          description: Volumes is a list of volumes that can be mounted by containers
            in a workflow.
          items:
            $ref: '#/components/schemas/v1.Volume'
          type: array
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: name
        tolerations:
          description: If specified, the pod's tolerations.
          items:
            $ref: '#/components/schemas/v1.Toleration'
          type: array
        securityContext:
          $ref: '#/components/schemas/v1.PodSecurityContext'
        metadata:
          $ref: '#/components/schemas/Metadata'
      type: object
    MQTTEventSource:
      description: MQTTEventSource refers to event-source for MQTT related events
      properties:
        tls:
          $ref: '#/components/schemas/TLSConfig'
        connectionBackoff:
          $ref: '#/components/schemas/Backoff'
        url:
          description: URL to connect to broker
          type: string
        jsonBody:
          description: JSONBody specifies that all event body payload coming from
            this source will be JSON
          type: boolean
        clientId:
          description: ClientID is the id of the client
          type: string
        topic:
          description: Topic name
          type: string
        metadata:
          additionalProperties:
            type: string
          description: Metadata holds the user defined metadata which will passed
            along the event payload.
          type: object
      required:
      - clientId
      - topic
      - url
      type: object
    GenericEventSource:
      description: GenericEventSource refers to a generic event source. It can be
        used to implement a custom event source.
      properties:
        value:
          description: Value of the event source
          type: string
      required:
      - value
      type: object
    SNSEventSource:
      description: SNSEventSource refers to event-source for AWS SNS related events
      properties:
        accessKey:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        webhook:
          $ref: '#/components/schemas/WebhookContext'
        secretKey:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        region:
          description: Region is AWS region
          type: string
        roleARN:
          description: RoleARN is the Amazon Resource Name (ARN) of the role to assume.
          type: string
        topicArn:
          description: TopicArn
          type: string
        metadata:
          additionalProperties:
            type: string
          description: Metadata holds the user defined metadata which will passed
            along the event payload.
          type: object
      required:
      - region
      - topicArn
      type: object
    WebhookContext:
      description: WebhookContext holds a general purpose REST API context
      properties:
        serverCertPath:
          description: DeprecatedServerCertPath refers the file that contains the
            cert.
          type: string
        endpoint:
          description: REST API endpoint
          type: string
        serverKeyPath:
          description: DeprecatedServerKeyPath refers the file that contains private
            key
          type: string
        authSecret:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        serverKeySecret:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        method:
          description: 'Method is HTTP request method that indicates the desired action
            to be performed for a given resource. See RFC7231 Hypertext Transfer Protocol
            (HTTP/1.1): Semantics and Content'
          type: string
        url:
          description: URL is the url of the server.
          type: string
        serverCertSecret:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        port:
          description: Port on which HTTP server is listening for incoming events.
          type: string
        metadata:
          additionalProperties:
            type: string
          description: Metadata holds the user defined metadata which will passed
            along the event payload.
          type: object
      required:
      - endpoint
      - method
      - port
      - url
      type: object
    PulsarEventSource:
      description: PulsarEventSource describes the event source for Apache Pulsar
      properties:
        tls:
          $ref: '#/components/schemas/TLSConfig'
        connectionBackoff:
          $ref: '#/components/schemas/Backoff'
        url:
          description: Configure the service URL for the Pulsar service.
          type: string
        jsonBody:
          description: JSONBody specifies that all event body payload coming from
            this source will be JSON
          type: boolean
        topics:
          description: Name of the topics to subscribe to.
          items:
            type: string
          type: array
        tlsTrustCertsSecret:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        tlsAllowInsecureConnection:
          description: Whether the Pulsar client accept untrusted TLS certificate
            from broker.
          type: boolean
        type:
          description: Type of the subscription. Only "exclusive" and "shared" is
            supported. Defaults to exclusive.
          type: string
        tlsValidateHostname:
          description: Whether the Pulsar client verify the validity of the host name
            from broker.
          type: boolean
        metadata:
          additionalProperties:
            type: string
          description: Metadata holds the user defined metadata which will passed
            along the event payload.
          type: object
      required:
      - topics
      - url
      type: object
    StorageGridEventSource:
      description: StorageGridEventSource refers to event-source for StorageGrid related
        events
      properties:
        authToken:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        webhook:
          $ref: '#/components/schemas/WebhookContext'
        region:
          description: S3 region. Defaults to us-east-1
          type: string
        bucket:
          description: Name of the bucket to register notifications for.
          type: string
        events:
          items:
            type: string
          type: array
        filter:
          $ref: '#/components/schemas/StorageGridFilter'
        apiURL:
          description: APIURL is the url of the storagegrid api.
          type: string
        topicArn:
          description: TopicArn
          type: string
        metadata:
          additionalProperties:
            type: string
          description: Metadata holds the user defined metadata which will passed
            along the event payload.
          type: object
      required:
      - apiURL
      - authToken
      - bucket
      - topicArn
      type: object
    Service:
      description: Service holds the service information eventsource exposes
      properties:
        clusterIP:
          description: 'clusterIP is the IP address of the service and is usually
            assigned randomly by the master. If an address is specified manually and
            is not in use by others, it will be allocated to the service; otherwise,
            creation of the service will fail. This field can not be changed through
            updates. Valid values are "None", empty string (""), or a valid IP address.
            "None" can be specified for headless services when proxying is not required.
            More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
          type: string
        ports:
          description: The list of ports that are exposed by this ClusterIP service.
          items:
            $ref: '#/components/schemas/v1.ServicePort'
          type: array
          x-kubernetes-patch-strategy: merge
          x-kubernetes-list-type: map
          x-kubernetes-list-map-keys:
          - port
          - protocol
          x-kubernetes-patch-merge-key: port
      type: object
    HDFSEventSource:
      description: HDFSEventSource refers to event-source for HDFS related events
      properties:
        krbUsername:
          description: KrbUsername is the Kerberos username used with Kerberos keytab
            It must be set if keytab is used.
          type: string
        addresses:
          items:
            type: string
          type: array
        checkInterval:
          description: CheckInterval is a string that describes an interval duration
            to check the directory state, e.g. 1s, 30m, 2h... (defaults to 1m)
          type: string
        krbCCacheSecret:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        krbRealm:
          description: KrbRealm is the Kerberos realm used with Kerberos keytab It
            must be set if keytab is used.
          type: string
        hdfsUser:
          description: HDFSUser is the user to access HDFS file system. It is ignored
            if either ccache or keytab is used.
          type: string
        pathRegexp:
          description: PathRegexp is regexp of relative path of object to watch with
            respect to the directory
          type: string
        krbServicePrincipalName:
          description: KrbServicePrincipalName is the principal name of Kerberos service
            It must be set if either ccache or keytab is used.
          type: string
        directory:
          description: Directory to watch for events
          type: string
        path:
          description: Path is relative path of object to watch with respect to the
            directory
          type: string
        krbKeytabSecret:
          $ref: '#/components/schemas/v1.SecretKeySelector'
        type:
          description: Type of file operations to watch
          type: string
        krbConfigConfigMap:
          $ref: '#/components/schemas/v1.ConfigMapKeySelector'
        metadata:
          additionalProperties:
            type: string
          description: Metadata holds the user defined metadata which will passed
            along the event payload.
          type: object
      required:
      - addresses
      - directory
      - type
      type: object
    EventSource:
      description: EventSource is the definition of a eventsource resource
      properties:
        status:
          $ref: '#/components/schemas/EventSourceStatus'
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        spec:
          $ref: '#/components/schemas/EventSourceSpec'
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        metadata:
          $ref: '#/components/schemas/v1.ObjectMeta'
      required:
      - metadata
      - spec
      - status
      type: object
    ResourceEventSource:
      description: ResourceEventSource refers to a event-source for K8s resource related
        events.
      properties:
        resource:
          type: string
        namespace:
          description: Namespace where resource is deployed
          type: string
        group:
          type: string
        filter:
          $ref: '#/components/schemas/ResourceFilter'
        version:
          type: string
        eventTypes:
          description: EventTypes is the list of event type to watch. Possible values
            are - ADD, UPDATE and DELETE.
          items:
            type: string
          type: array
        metadata:
          additionalProperties:
            type: string
          description: Metadata holds the user defined metadata which will passed
            along the event payload.
          type: object
      required:
      - eventTypes
      - group
      - namespace
      - resource
      - version
      type: object
    NSQEventSource:
      description: NSQEventSource describes the event source for NSQ PubSub More info
        at https://godoc.org/github.com/nsqio/go-nsq
      properties:
        tls:
          $ref: '#/components/schemas/TLSConfig'
        connectionBackoff:
          $ref: '#/components/schemas/Backoff'
        jsonBody:
          description: JSONBody specifies that all event body payload coming from
            this source will be JSON
          type: boolean
        topic:
          description: Topic to subscribe to.
          type: string
        hostAddress:
          description: HostAddress is the address of the host for NSQ lookup
          type: string
        channel:
          description: Channel used for subscription
          type: string
        metadata:
          additionalProperties:
            type: string
          description: Metadata holds the user defined metadata which will passed
            along the event payload.
          type: object
      required:
      - channel
      - hostAddress
      - topic
      type: object

